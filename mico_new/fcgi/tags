!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AES_CBCDecrypt	WXBizDataCrypt.cpp	/^int WXBizDataCrypt::AES_CBCDecrypt( const char * sSource, const uint32_t iSize,$/;"	f	class:WxBizDataSecure::WXBizDataCrypt
AES_CBCDecrypt	WXBizDataCrypt.cpp	/^int WXBizDataCrypt::AES_CBCDecrypt( const std::string & objSource,$/;"	f	class:WxBizDataSecure::WXBizDataCrypt
AES_CBCDecrypt	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::AES_CBCDecrypt( const char * sSource, const uint32_t iSize,$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
AES_CBCDecrypt	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::AES_CBCDecrypt( const std::string & objSource,$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
AES_CBCDecrypt	c++/WXBizDataCrypt.cpp	/^int WXBizDataCrypt::AES_CBCDecrypt( const char * sSource, const uint32_t iSize,$/;"	f	class:WxBizDataSecure::WXBizDataCrypt
AES_CBCDecrypt	c++/WXBizDataCrypt.cpp	/^int WXBizDataCrypt::AES_CBCDecrypt( const std::string & objSource,$/;"	f	class:WxBizDataSecure::WXBizDataCrypt
AES_CBCEncrypt	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::AES_CBCEncrypt( const char * sSource, const uint32_t iSize,$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
AES_CBCEncrypt	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::AES_CBCEncrypt( const std::string & objSource,$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
APPID	fcgiEnv.h	/^static const string APPID = "wxac6aa86d51459bba";$/;"	m	namespace:WXOfficialAcountsServer
APPID_INTIME	fcgiEnv.h	/^static const string APPID_INTIME = "wxa3376a8cbea27476";$/;"	m	namespace:WXOfficialAcountsServer
APPSECRET	fcgiEnv.h	/^static const string APPSECRET = "ffc4de8bc2ad72dfea26616dc77274df";$/;"	m	namespace:WXOfficialAcountsServer
APPSECRET_INTIME	fcgiEnv.h	/^static const string APPSECRET_INTIME= "04f74a356d8309896e988184d29f6ab0";$/;"	m	namespace:WXOfficialAcountsServer
CGIENV_H	fcgiEnv.h	2;"	d
CPPFLAGS	c++/Makefile	/^CPPFLAGS = -g -W -Wall$/;"	m
ComputeSignature	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::ComputeSignature(const std::string sToken, const std::string sTimeStamp, const std::string & sNonce,$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
Content	fcgiEnv.h	/^	string Content;$/;"	m	struct:WXOfficialAcountsServer::_WXPostTextMsg
CreateMiniProgramMsg	fcgiEnv.cpp	/^void CreateMiniProgramMsg(string openid, string phone, string &msg){$/;"	f	namespace:WXOfficialAcountsServer
CreateTime	fcgiEnv.h	/^	string CreateTime;$/;"	m	struct:WXOfficialAcountsServer::_WXPostTextMsg
CreateXmlMsgStr	fcgiEnv.cpp	/^int CreateXmlMsgStr(const unordered_map<string,string> &unmap, string &replyMsg){$/;"	f	namespace:WXOfficialAcountsServer
DELETE_PTR	WXBizDataCrypt.cpp	24;"	d	file:
DELETE_PTR	WXBizMsgCrypt.cpp	23;"	d	file:
DELETE_PTR	c++/WXBizDataCrypt.cpp	23;"	d	file:
DELETE_PTR	fcgiEnv.cpp	7;"	d	file:
DecodeBase64	WXBizDataCrypt.cpp	/^int WXBizDataCrypt::DecodeBase64(const std::string sSrc, std::string & sTarget)$/;"	f	class:WxBizDataSecure::WXBizDataCrypt
DecodeBase64	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::DecodeBase64(const std::string sSrc, std::string & sTarget)$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
DecodeBase64	c++/WXBizDataCrypt.cpp	/^int WXBizDataCrypt::DecodeBase64(const std::string sSrc, std::string & sTarget)$/;"	f	class:WxBizDataSecure::WXBizDataCrypt
DecryptData	WXBizDataCrypt.cpp	/^int WXBizDataCrypt :: DecryptData($/;"	f	class:WxBizDataSecure::WXBizDataCrypt
DecryptData	c++/WXBizDataCrypt.cpp	/^int WXBizDataCrypt :: DecryptData($/;"	f	class:WxBizDataSecure::WXBizDataCrypt
DecryptMsg	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::DecryptMsg(const std::string &sMsgSignature,$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
DecryptUserPhoneData	fcgiEnv.cpp	/^int DecryptUserPhoneData(string &encryData,string &session_key,string &ivData,string &phone){$/;"	f	namespace:WXOfficialAcountsServer
ERROR_FORMAT_PHONENUM	fcgiEnv.h	/^static const int ERROR_FORMAT_PHONENUM = -101;$/;"	m	namespace:WXOfficialAcountsServer
EncodeBase64	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::EncodeBase64(const std::string sSrc, std::string & sTarget)$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
EncryptAndDecrypt	WXBizMsgCrypt.cpp	/^namespace EncryptAndDecrypt{$/;"	n	file:
EncryptAndDecrypt	WXBizMsgCrypt.h	/^namespace EncryptAndDecrypt {$/;"	n
EncryptMsg	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::EncryptMsg(const std::string &sReplyMsg,$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
Expire	redisConnPool/redisConnPool.cpp	/^void RedisConnPool::Expire(std::string key,uint32_t timeout){$/;"	f	class:RedisConnPool
FREE_PTR	WXBizDataCrypt.cpp	18;"	d	file:
FREE_PTR	WXBizMsgCrypt.cpp	17;"	d	file:
FREE_PTR	c++/WXBizDataCrypt.cpp	17;"	d	file:
FindSessionKeyInRedis	fcgiEnv.cpp	/^int FindSessionKeyInRedis(string _3rdSessionKey,string &_sessionKey,string &openid){$/;"	f	namespace:WXOfficialAcountsServer
FromHex	urlDecode.cpp	/^unsigned char FromHex(unsigned char x) $/;"	f
FromUserName	fcgiEnv.h	/^	string FromUserName;$/;"	m	struct:WXOfficialAcountsServer::_WXPostTextMsg
GCC	c++/Makefile	/^GCC=g++$/;"	m
GenAesKeyFromEncodingKey	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::GenAesKeyFromEncodingKey( const std::string & sEncodingKey, std::string & sAesKey)$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
GenNeedEncryptData	WXBizMsgCrypt.cpp	/^void WXBizMsgCrypt::GenNeedEncryptData(const std::string &sReplyMsg,std::string & sNeedEncrypt )$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
GenRandStr	WXBizMsgCrypt.cpp	/^void WXBizMsgCrypt::GenRandStr(std::string & sRandStr, uint32_t len)$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
GenReturnXml	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::GenReturnXml(const std::string & sEncryptMsg, const std::string & sSignature, const std::string & sTimeStamp, $/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
GenerateJsonString	fcgiEnv.cpp	/^void GenerateJsonString(string &_3rdSessionKey){$/;"	f	namespace:WXOfficialAcountsServer
Get	redisConnPool/redisConnPool.cpp	/^void RedisConnPool::Get(std::string key, std::string &value)$/;"	f	class:RedisConnPool
Get3rdSessionKeyData	fcgiEnv.cpp	/^int Get3rdSessionKeyData(string strIn,string &sessionKey,string &openid){$/;"	f	namespace:WXOfficialAcountsServer
GetLinuxTime	fcgiEnv.cpp	/^string GetLinuxTime(){$/;"	f	namespace:WXOfficialAcountsServer
GetMiniProgramAccessToken	fcgiEnv.cpp	/^int GetMiniProgramAccessToken(string &accessToken){$/;"	f	namespace:WXOfficialAcountsServer
GetOpenidSessionKey	fcgiEnv.cpp	/^int GetOpenidSessionKey(string code,string &get_content)$/;"	f	namespace:WXOfficialAcountsServer
GetPhoneData	fcgiEnv.cpp	/^int GetPhoneData(string sData,string &phoneNumber){$/;"	f	namespace:WXOfficialAcountsServer
GetTimeOfNow	fcgiEnv.cpp	/^string GetTimeOfNow(){$/;"	f	namespace:WXOfficialAcountsServer
GetXmlField	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::GetXmlField(const std::string & sPostData, const std::string & sField, std::string &sEncryptMsg)$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
HttpsGetData	fcgiEnv.cpp	/^int HttpsGetData(const string &host, string &get_content)$/;"	f	namespace:WXOfficialAcountsServer
HttpsPostData	fcgiEnv.cpp	/^int HttpsPostData(const string &host, string &post_content,string &post_response)$/;"	f	namespace:WXOfficialAcountsServer
INCLUDEDIR	c++/Makefile	/^INCLUDEDIR=  -I..\/lib\/include64\/$/;"	m
LIBDIR	c++/Makefile	/^LIBDIR= -L..\/lib\/lib64\/ -l crypto $/;"	m
LookupPhoneNumIndb	fcgiEnv.cpp	/^int LookupPhoneNumIndb(IMysqlConnPool *m_mysqlpool,string &openid,string phone){$/;"	f	namespace:WXOfficialAcountsServer
MYSQL_QUERY_NO_CONTENT	fcgiEnv.h	/^static const int MYSQL_QUERY_NO_CONTENT = -100;$/;"	m	namespace:WXOfficialAcountsServer
MiniProgramNotifyUser	fcgiEnv.cpp	/^int MiniProgramNotifyUser(string miniaccesstoken,string openid, string phone){$/;"	f	namespace:WXOfficialAcountsServer
MsgType	fcgiEnv.h	/^	string MsgType;$/;"	m	struct:WXOfficialAcountsServer::_WXPostTextMsg
NotifyUserWX	fcgiEnv.cpp	/^int NotifyUserWX(IMysqlConnPool *m_mysqlpool,const string &template_id,const string &host,string strPostData,string strRecvData,string alarmMsg){$/;"	f	namespace:WXOfficialAcountsServer
OBJS	c++/Makefile	/^OBJS=$(patsubst %.cpp,%.o,$(SOURCES) )$/;"	m
OPEN_ID	fcgiEnv.h	/^static const string OPEN_ID = "";$/;"	m	namespace:WXOfficialAcountsServer
ParseGetDataFromHttp	fcgiEnv.cpp	/^int ParseGetDataFromHttp(const string &getData,unordered_map<string,string> &getDataPair){$/;"	f	namespace:WXOfficialAcountsServer
REDIS_CONN_POOL_H	redisConnPool/redisConnPool.h	2;"	d
RSP_BUF_LEN	fcgiEnv.h	/^static const int RSP_BUF_LEN = 40960;$/;"	m	namespace:WXOfficialAcountsServer
ReadPostBuffer	fcgiEnv.cpp	/^int ReadPostBuffer(const string &getData,string &strBuff)$/;"	f	namespace:WXOfficialAcountsServer
RedisConnPool	redisConnPool/redisConnPool.cpp	/^RedisConnPool::RedisConnPool(){$/;"	f	class:RedisConnPool
RedisConnPool	redisConnPool/redisConnPool.h	/^class RedisConnPool $/;"	c
SENCODINGAESKEY	fcgiEnv.h	/^static const string SENCODINGAESKEY = "i9JhASnLEC9KGqT1i8VmAdEeMpuaZU7k6RtJWwx3o7Q";$/;"	m	namespace:WXOfficialAcountsServer
SESSIONKEYTIMEOUT	fcgiEnv.h	/^static const uint32_t SESSIONKEYTIMEOUT = 600;$/;"	m	namespace:WXOfficialAcountsServer
SOURCES	c++/Makefile	/^SOURCES = $(wildcard *.cpp)$/;"	m
STRIP	fcgiEnv.h	/^static const string STRIP = "58.251.80.204";$/;"	m	namespace:WXOfficialAcountsServer
Set	redisConnPool/redisConnPool.cpp	/^void RedisConnPool::Set(std::string key, std::string &value)$/;"	f	class:RedisConnPool
Set3rdSessionKeyInRedis	fcgiEnv.cpp	/^int Set3rdSessionKeyInRedis(string sessionKey,string openid,string &_3rdSessionKey,uint32_t timeout){$/;"	f	namespace:WXOfficialAcountsServer
SetOneFieldToXml	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::SetOneFieldToXml(tinyxml2::XMLDocument * pDoc, tinyxml2::XMLNode* pXmlNode, const char * pcFieldName, $/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
SetOneFieldToXml	fcgiEnv.cpp	/^int SetOneFieldToXml(tinyxml2::XMLDocument * pDoc, tinyxml2::XMLNode* pXmlNode, const char * pcFieldName,$/;"	f	namespace:WXOfficialAcountsServer
SocketHttps	fcgiEnv.cpp	/^int SocketHttps(const string &host, const string &request, string &response)$/;"	f	namespace:WXOfficialAcountsServer
TEMPLATE_ID	fcgiEnv.h	/^static const string TEMPLATE_ID = "T7ZENJuvTniO-EIcDzELTdGyxnSOggaLuJcFIfeCZmE";$/;"	m	namespace:WXOfficialAcountsServer
TEMPLATE_ID_PHONE_VALID	fcgiEnv.h	/^static const string TEMPLATE_ID_PHONE_VALID = "i9JhASnLEC9KGqT1i8VmAdEeMpuaZU7k6RtJWwx3o7Q";$/;"	m	namespace:WXOfficialAcountsServer
TOKEN	fcgiEnv.h	/^static const string TOKEN = "wubcToken";$/;"	m	namespace:WXOfficialAcountsServer
ToHex	urlDecode.h	/^inline unsigned char ToHex(unsigned char x) $/;"	f
ToUserName	fcgiEnv.h	/^	string ToUserName;$/;"	m	struct:WXOfficialAcountsServer::_WXPostTextMsg
UrlDecode	urlDecode.cpp	/^std::string UrlDecode(const std::string& str)$/;"	f
ValidateSignature	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::ValidateSignature(const std::string &sMsgSignature, const std::string &sTimeStamp, $/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
VerifyPhoneNum	fcgiEnv.cpp	/^bool VerifyPhoneNum(string phone){$/;"	f	namespace:WXOfficialAcountsServer
VerifyPhoneNumInDB	fcgiEnv.cpp	/^void VerifyPhoneNumInDB(IMysqlConnPool *m_mysqlpool,unordered_map<string,string> &unmap,string &replyContent){$/;"	f	namespace:WXOfficialAcountsServer
WXAuthVerify	fcgiEnv.h	/^}WXAuthVerify;$/;"	t	namespace:WXOfficialAcountsServer	typeref:struct:WXOfficialAcountsServer::_WXAuthVerify
WXBizDataCrypt	WXBizDataCrypt.h	/^    WXBizDataCrypt( const std::string &sAppid,$/;"	f	class:WxBizDataSecure::WXBizDataCrypt
WXBizDataCrypt	WXBizDataCrypt.h	/^class WXBizDataCrypt$/;"	c	namespace:WxBizDataSecure
WXBizDataCrypt	c++/WXBizDataCrypt.h	/^    WXBizDataCrypt( const std::string &sAppid,$/;"	f	class:WxBizDataSecure::WXBizDataCrypt
WXBizDataCrypt	c++/WXBizDataCrypt.h	/^class WXBizDataCrypt$/;"	c	namespace:WxBizDataSecure
WXBizDataCrypt_DecodeBase64_Error	WXBizDataCrypt.h	/^    WXBizDataCrypt_DecodeBase64_Error = -41004,$/;"	e	enum:WxBizDataSecure::WxBizDataCryptErrorCode
WXBizDataCrypt_DecodeBase64_Error	c++/WXBizDataCrypt.h	/^    WXBizDataCrypt_DecodeBase64_Error = -41004,$/;"	e	enum:WxBizDataSecure::WxBizDataCryptErrorCode
WXBizDataCrypt_IllegalAesKey	WXBizDataCrypt.h	/^    WXBizDataCrypt_IllegalAesKey = -41001,$/;"	e	enum:WxBizDataSecure::WxBizDataCryptErrorCode
WXBizDataCrypt_IllegalAesKey	c++/WXBizDataCrypt.h	/^    WXBizDataCrypt_IllegalAesKey = -41001,$/;"	e	enum:WxBizDataSecure::WxBizDataCryptErrorCode
WXBizDataCrypt_IllegalBuffer	WXBizDataCrypt.h	/^    WXBizDataCrypt_IllegalBuffer = -41003,$/;"	e	enum:WxBizDataSecure::WxBizDataCryptErrorCode
WXBizDataCrypt_IllegalBuffer	c++/WXBizDataCrypt.h	/^    WXBizDataCrypt_IllegalBuffer = -41003,$/;"	e	enum:WxBizDataSecure::WxBizDataCryptErrorCode
WXBizDataCrypt_IllegalIv	WXBizDataCrypt.h	/^    WXBizDataCrypt_IllegalIv = -41002,$/;"	e	enum:WxBizDataSecure::WxBizDataCryptErrorCode
WXBizDataCrypt_IllegalIv	c++/WXBizDataCrypt.h	/^    WXBizDataCrypt_IllegalIv = -41002,$/;"	e	enum:WxBizDataSecure::WxBizDataCryptErrorCode
WXBizDataCrypt_OK	WXBizDataCrypt.h	/^    WXBizDataCrypt_OK = 0,$/;"	e	enum:WxBizDataSecure::WxBizDataCryptErrorCode
WXBizDataCrypt_OK	c++/WXBizDataCrypt.h	/^    WXBizDataCrypt_OK = 0,$/;"	e	enum:WxBizDataSecure::WxBizDataCryptErrorCode
WXBizMsgCrypt	WXBizMsgCrypt.h	/^    WXBizMsgCrypt(const std::string &sToken, $/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
WXBizMsgCrypt	WXBizMsgCrypt.h	/^class WXBizMsgCrypt$/;"	c	namespace:EncryptAndDecrypt
WXBizMsgCryptErrorCode	WXBizMsgCrypt.h	/^enum  WXBizMsgCryptErrorCode$/;"	g	namespace:EncryptAndDecrypt
WXBizMsgCrypt_ComputeSignature_Error	WXBizMsgCrypt.h	/^    WXBizMsgCrypt_ComputeSignature_Error = -40003,$/;"	e	enum:EncryptAndDecrypt::WXBizMsgCryptErrorCode
WXBizMsgCrypt_DecodeBase64_Error	WXBizMsgCrypt.h	/^    WXBizMsgCrypt_DecodeBase64_Error = -40010,$/;"	e	enum:EncryptAndDecrypt::WXBizMsgCryptErrorCode
WXBizMsgCrypt_DecryptAES_Error	WXBizMsgCrypt.h	/^    WXBizMsgCrypt_DecryptAES_Error = -40007,$/;"	e	enum:EncryptAndDecrypt::WXBizMsgCryptErrorCode
WXBizMsgCrypt_EncodeBase64_Error	WXBizMsgCrypt.h	/^    WXBizMsgCrypt_EncodeBase64_Error = -40009,$/;"	e	enum:EncryptAndDecrypt::WXBizMsgCryptErrorCode
WXBizMsgCrypt_EncryptAES_Error	WXBizMsgCrypt.h	/^    WXBizMsgCrypt_EncryptAES_Error = -40006,$/;"	e	enum:EncryptAndDecrypt::WXBizMsgCryptErrorCode
WXBizMsgCrypt_GenReturnXml_Error	WXBizMsgCrypt.h	/^    WXBizMsgCrypt_GenReturnXml_Error = -40011,$/;"	e	enum:EncryptAndDecrypt::WXBizMsgCryptErrorCode
WXBizMsgCrypt_IllegalAesKey	WXBizMsgCrypt.h	/^    WXBizMsgCrypt_IllegalAesKey = -40004,$/;"	e	enum:EncryptAndDecrypt::WXBizMsgCryptErrorCode
WXBizMsgCrypt_IllegalBuffer	WXBizMsgCrypt.h	/^    WXBizMsgCrypt_IllegalBuffer = -40008,$/;"	e	enum:EncryptAndDecrypt::WXBizMsgCryptErrorCode
WXBizMsgCrypt_OK	WXBizMsgCrypt.h	/^    WXBizMsgCrypt_OK = 0,$/;"	e	enum:EncryptAndDecrypt::WXBizMsgCryptErrorCode
WXBizMsgCrypt_ParseXml_Error	WXBizMsgCrypt.h	/^    WXBizMsgCrypt_ParseXml_Error = -40002,$/;"	e	enum:EncryptAndDecrypt::WXBizMsgCryptErrorCode
WXBizMsgCrypt_ValidateAppid_Error	WXBizMsgCrypt.h	/^    WXBizMsgCrypt_ValidateAppid_Error = -40005,$/;"	e	enum:EncryptAndDecrypt::WXBizMsgCryptErrorCode
WXBizMsgCrypt_ValidateSignature_Error	WXBizMsgCrypt.h	/^    WXBizMsgCrypt_ValidateSignature_Error = -40001,$/;"	e	enum:EncryptAndDecrypt::WXBizMsgCryptErrorCode
WXCreateMenu	fcgiEnv.cpp	/^int WXCreateMenu(string &jsonStr){$/;"	f	namespace:WXOfficialAcountsServer
WXCreateMsg	fcgiEnv.cpp	/^int WXCreateMsg(IMysqlConnPool *m_mysqlpool,unordered_map<string,string> &unmap, string &strXml){$/;"	f	namespace:WXOfficialAcountsServer
WXCreateTemplateMsg	fcgiEnv.cpp	/^int WXCreateTemplateMsg(const string &open_id,const string &template_id,const string &alarmMsg,string &jsonStr){$/;"	f	namespace:WXOfficialAcountsServer
WXGetAccessToken	fcgiEnv.cpp	/^int WXGetAccessToken(string &accessToken){$/;"	f	namespace:WXOfficialAcountsServer
WXOfficialAcountsServer	fcgiEnv.cpp	/^namespace WXOfficialAcountsServer{$/;"	n	file:
WXOfficialAcountsServer	fcgiEnv.h	/^namespace WXOfficialAcountsServer{$/;"	n
WXParseAuthVerifyData	fcgiEnv.cpp	/^int WXParseAuthVerifyData(const string &getData,struct _WXAuthVerify &data,string &_3rdSessionKey,string &miniopenid,string &phone){$/;"	f	namespace:WXOfficialAcountsServer
WXPostDataXMLParse	fcgiEnv.cpp	/^int WXPostDataXMLParse(const string &buffer,unordered_map<string,string> &unmap){$/;"	f	namespace:WXOfficialAcountsServer
WXValidateSignature	fcgiEnv.cpp	/^bool WXValidateSignature(struct _WXAuthVerify &data){$/;"	f	namespace:WXOfficialAcountsServer
WxBizDataCryptErrorCode	WXBizDataCrypt.h	/^enum  WxBizDataCryptErrorCode$/;"	g	namespace:WxBizDataSecure
WxBizDataCryptErrorCode	c++/WXBizDataCrypt.h	/^enum  WxBizDataCryptErrorCode$/;"	g	namespace:WxBizDataSecure
WxBizDataSecure	WXBizDataCrypt.cpp	/^namespace WxBizDataSecure{$/;"	n	file:
WxBizDataSecure	WXBizDataCrypt.h	/^namespace WxBizDataSecure {$/;"	n
WxBizDataSecure	c++/WXBizDataCrypt.cpp	/^namespace WxBizDataSecure{$/;"	n	file:
WxBizDataSecure	c++/WXBizDataCrypt.h	/^namespace WxBizDataSecure {$/;"	n
_WXAuthVerify	fcgiEnv.h	/^typedef struct _WXAuthVerify{$/;"	s	namespace:WXOfficialAcountsServer
_WXPostTextMsg	fcgiEnv.h	/^typedef struct _WXPostTextMsg{$/;"	s	namespace:WXOfficialAcountsServer
echostr	fcgiEnv.h	/^	string echostr;$/;"	m	struct:WXOfficialAcountsServer::_WXAuthVerify
encrypt	fcgiEnv.h	/^	string encrypt;$/;"	m	struct:WXOfficialAcountsServer::_WXAuthVerify
get_instance	redisConnPool/redisConnPool.cpp	/^std::shared_ptr<RedisConnPool> RedisConnPool::get_instance(){$/;"	f	class:RedisConnPool
kAesIVSize	WXBizDataCrypt.h	/^static const unsigned int kAesIVSize = 16;$/;"	m	namespace:WxBizDataSecure
kAesIVSize	WXBizMsgCrypt.h	/^static const unsigned int kAesIVSize = 16;$/;"	m	namespace:EncryptAndDecrypt
kAesIVSize	c++/WXBizDataCrypt.h	/^static const unsigned int kAesIVSize = 16;$/;"	m	namespace:WxBizDataSecure
kAesKeySize	WXBizDataCrypt.h	/^static const unsigned int kAesKeySize = 16;$/;"	m	namespace:WxBizDataSecure
kAesKeySize	WXBizMsgCrypt.h	/^static const unsigned int kAesKeySize = 32;$/;"	m	namespace:EncryptAndDecrypt
kAesKeySize	c++/WXBizDataCrypt.h	/^static const unsigned int kAesKeySize = 16;$/;"	m	namespace:WxBizDataSecure
kEncodingKeySize	WXBizDataCrypt.h	/^static const unsigned int kEncodingKeySize = 24;$/;"	m	namespace:WxBizDataSecure
kEncodingKeySize	WXBizMsgCrypt.h	/^static const unsigned int kEncodingKeySize = 43;$/;"	m	namespace:EncryptAndDecrypt
kEncodingKeySize	c++/WXBizDataCrypt.h	/^static const unsigned int kEncodingKeySize = 24;$/;"	m	namespace:WxBizDataSecure
kMaxBase64Size	WXBizDataCrypt.h	/^static const unsigned int kMaxBase64Size = 1000000000;$/;"	m	namespace:WxBizDataSecure
kMaxBase64Size	WXBizMsgCrypt.h	/^static const unsigned int kMaxBase64Size = 1000000000;$/;"	m	namespace:EncryptAndDecrypt
kMaxBase64Size	c++/WXBizDataCrypt.h	/^static const unsigned int kMaxBase64Size = 1000000000;$/;"	m	namespace:WxBizDataSecure
kMsgLen	WXBizMsgCrypt.h	/^static const unsigned int kMsgLen = 4;$/;"	m	namespace:EncryptAndDecrypt
kRandEncryptStrLen	WXBizMsgCrypt.h	/^static const unsigned int kRandEncryptStrLen = 16;$/;"	m	namespace:EncryptAndDecrypt
m_sAppid	WXBizDataCrypt.h	/^    std::string m_sAppid;$/;"	m	class:WxBizDataSecure::WXBizDataCrypt
m_sAppid	WXBizMsgCrypt.h	/^    std::string m_sAppid;$/;"	m	class:EncryptAndDecrypt::WXBizMsgCrypt
m_sAppid	c++/WXBizDataCrypt.h	/^    std::string m_sAppid;$/;"	m	class:WxBizDataSecure::WXBizDataCrypt
m_sEncodingAESKey	WXBizMsgCrypt.h	/^    std::string m_sEncodingAESKey;$/;"	m	class:EncryptAndDecrypt::WXBizMsgCrypt
m_sSessionkey	WXBizDataCrypt.h	/^    std::string m_sSessionkey;$/;"	m	class:WxBizDataSecure::WXBizDataCrypt
m_sSessionkey	c++/WXBizDataCrypt.h	/^    std::string m_sSessionkey;$/;"	m	class:WxBizDataSecure::WXBizDataCrypt
m_sToken	WXBizMsgCrypt.h	/^    std::string m_sToken;$/;"	m	class:EncryptAndDecrypt::WXBizMsgCrypt
main	c++/Sample.cpp	/^int main()$/;"	f
main	fcgiMain.cpp	/^int main(int argc, char **argv){$/;"	f
main	test1/test.cpp	/^int main()$/;"	f
msg_signature	fcgiEnv.h	/^	string msg_signature;$/;"	m	struct:WXOfficialAcountsServer::_WXAuthVerify
nonce	fcgiEnv.h	/^	string nonce;$/;"	m	struct:WXOfficialAcountsServer::_WXAuthVerify
openid	fcgiEnv.h	/^	string openid;$/;"	m	struct:WXOfficialAcountsServer::_WXAuthVerify
pool	redisConnPool/redisConnPool.h	/^	std::shared_ptr<RedisConnectionPool> pool;$/;"	m	class:RedisConnPool
signature	fcgiEnv.h	/^	string signature;$/;"	m	struct:WXOfficialAcountsServer::_WXAuthVerify
timestamp	fcgiEnv.h	/^	string timestamp;$/;"	m	struct:WXOfficialAcountsServer::_WXAuthVerify
wxPostTextMsg	fcgiEnv.h	/^}wxPostTextMsg;$/;"	t	namespace:WXOfficialAcountsServer	typeref:struct:WXOfficialAcountsServer::_WXPostTextMsg
~RedisConnPool	redisConnPool/redisConnPool.cpp	/^RedisConnPool::~RedisConnPool(){$/;"	f	class:RedisConnPool
