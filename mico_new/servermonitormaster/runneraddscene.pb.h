// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: runneraddscene.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_runneraddscene_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_runneraddscene_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_runneraddscene_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_runneraddscene_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_runneraddscene_2eproto;
namespace SceneRunner {
class AddSceneRequest;
class AddSceneRequestDefaultTypeInternal;
extern AddSceneRequestDefaultTypeInternal _AddSceneRequest_default_instance_;
class AddSceneResponse;
class AddSceneResponseDefaultTypeInternal;
extern AddSceneResponseDefaultTypeInternal _AddSceneResponse_default_instance_;
class RemovesceneRequest;
class RemovesceneRequestDefaultTypeInternal;
extern RemovesceneRequestDefaultTypeInternal _RemovesceneRequest_default_instance_;
class RemovesceneResponse;
class RemovesceneResponseDefaultTypeInternal;
extern RemovesceneResponseDefaultTypeInternal _RemovesceneResponse_default_instance_;
}  // namespace SceneRunner
PROTOBUF_NAMESPACE_OPEN
template<> ::SceneRunner::AddSceneRequest* Arena::CreateMaybeMessage<::SceneRunner::AddSceneRequest>(Arena*);
template<> ::SceneRunner::AddSceneResponse* Arena::CreateMaybeMessage<::SceneRunner::AddSceneResponse>(Arena*);
template<> ::SceneRunner::RemovesceneRequest* Arena::CreateMaybeMessage<::SceneRunner::RemovesceneRequest>(Arena*);
template<> ::SceneRunner::RemovesceneResponse* Arena::CreateMaybeMessage<::SceneRunner::RemovesceneResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SceneRunner {

// ===================================================================

class AddSceneRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SceneRunner.AddSceneRequest) */ {
 public:
  inline AddSceneRequest() : AddSceneRequest(nullptr) {}
  virtual ~AddSceneRequest();

  AddSceneRequest(const AddSceneRequest& from);
  AddSceneRequest(AddSceneRequest&& from) noexcept
    : AddSceneRequest() {
    *this = ::std::move(from);
  }

  inline AddSceneRequest& operator=(const AddSceneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddSceneRequest& operator=(AddSceneRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddSceneRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddSceneRequest* internal_default_instance() {
    return reinterpret_cast<const AddSceneRequest*>(
               &_AddSceneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddSceneRequest& a, AddSceneRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddSceneRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddSceneRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddSceneRequest* New() const final {
    return CreateMaybeMessage<AddSceneRequest>(nullptr);
  }

  AddSceneRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddSceneRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddSceneRequest& from);
  void MergeFrom(const AddSceneRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddSceneRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SceneRunner.AddSceneRequest";
  }
  protected:
  explicit AddSceneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runneraddscene_2eproto);
    return ::descriptor_table_runneraddscene_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneidFieldNumber = 1,
  };
  // uint64 sceneid = 1;
  void clear_sceneid();
  ::PROTOBUF_NAMESPACE_ID::uint64 sceneid() const;
  void set_sceneid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sceneid() const;
  void _internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SceneRunner.AddSceneRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sceneid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runneraddscene_2eproto;
};
// -------------------------------------------------------------------

class AddSceneResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SceneRunner.AddSceneResponse) */ {
 public:
  inline AddSceneResponse() : AddSceneResponse(nullptr) {}
  virtual ~AddSceneResponse();

  AddSceneResponse(const AddSceneResponse& from);
  AddSceneResponse(AddSceneResponse&& from) noexcept
    : AddSceneResponse() {
    *this = ::std::move(from);
  }

  inline AddSceneResponse& operator=(const AddSceneResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddSceneResponse& operator=(AddSceneResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddSceneResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddSceneResponse* internal_default_instance() {
    return reinterpret_cast<const AddSceneResponse*>(
               &_AddSceneResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddSceneResponse& a, AddSceneResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddSceneResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddSceneResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddSceneResponse* New() const final {
    return CreateMaybeMessage<AddSceneResponse>(nullptr);
  }

  AddSceneResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddSceneResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddSceneResponse& from);
  void MergeFrom(const AddSceneResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddSceneResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SceneRunner.AddSceneResponse";
  }
  protected:
  explicit AddSceneResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runneraddscene_2eproto);
    return ::descriptor_table_runneraddscene_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
  };
  // int32 res = 1;
  void clear_res();
  ::PROTOBUF_NAMESPACE_ID::int32 res() const;
  void set_res(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_res() const;
  void _internal_set_res(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SceneRunner.AddSceneResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runneraddscene_2eproto;
};
// -------------------------------------------------------------------

class RemovesceneRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SceneRunner.RemovesceneRequest) */ {
 public:
  inline RemovesceneRequest() : RemovesceneRequest(nullptr) {}
  virtual ~RemovesceneRequest();

  RemovesceneRequest(const RemovesceneRequest& from);
  RemovesceneRequest(RemovesceneRequest&& from) noexcept
    : RemovesceneRequest() {
    *this = ::std::move(from);
  }

  inline RemovesceneRequest& operator=(const RemovesceneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemovesceneRequest& operator=(RemovesceneRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemovesceneRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovesceneRequest* internal_default_instance() {
    return reinterpret_cast<const RemovesceneRequest*>(
               &_RemovesceneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RemovesceneRequest& a, RemovesceneRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemovesceneRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemovesceneRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemovesceneRequest* New() const final {
    return CreateMaybeMessage<RemovesceneRequest>(nullptr);
  }

  RemovesceneRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemovesceneRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemovesceneRequest& from);
  void MergeFrom(const RemovesceneRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovesceneRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SceneRunner.RemovesceneRequest";
  }
  protected:
  explicit RemovesceneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runneraddscene_2eproto);
    return ::descriptor_table_runneraddscene_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneidFieldNumber = 1,
  };
  // uint64 sceneid = 1;
  void clear_sceneid();
  ::PROTOBUF_NAMESPACE_ID::uint64 sceneid() const;
  void set_sceneid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sceneid() const;
  void _internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SceneRunner.RemovesceneRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sceneid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runneraddscene_2eproto;
};
// -------------------------------------------------------------------

class RemovesceneResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SceneRunner.RemovesceneResponse) */ {
 public:
  inline RemovesceneResponse() : RemovesceneResponse(nullptr) {}
  virtual ~RemovesceneResponse();

  RemovesceneResponse(const RemovesceneResponse& from);
  RemovesceneResponse(RemovesceneResponse&& from) noexcept
    : RemovesceneResponse() {
    *this = ::std::move(from);
  }

  inline RemovesceneResponse& operator=(const RemovesceneResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemovesceneResponse& operator=(RemovesceneResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemovesceneResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovesceneResponse* internal_default_instance() {
    return reinterpret_cast<const RemovesceneResponse*>(
               &_RemovesceneResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RemovesceneResponse& a, RemovesceneResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemovesceneResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemovesceneResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemovesceneResponse* New() const final {
    return CreateMaybeMessage<RemovesceneResponse>(nullptr);
  }

  RemovesceneResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemovesceneResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemovesceneResponse& from);
  void MergeFrom(const RemovesceneResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovesceneResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SceneRunner.RemovesceneResponse";
  }
  protected:
  explicit RemovesceneResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runneraddscene_2eproto);
    return ::descriptor_table_runneraddscene_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
  };
  // int32 res = 1;
  void clear_res();
  ::PROTOBUF_NAMESPACE_ID::int32 res() const;
  void set_res(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_res() const;
  void _internal_set_res(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SceneRunner.RemovesceneResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runneraddscene_2eproto;
};
// ===================================================================

class RunnerAddSceneService_Stub;

class RunnerAddSceneService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RunnerAddSceneService() {};
 public:
  virtual ~RunnerAddSceneService();

  typedef RunnerAddSceneService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void addscene(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SceneRunner::AddSceneRequest* request,
                       ::SceneRunner::AddSceneResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void removescene(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SceneRunner::RemovesceneRequest* request,
                       ::SceneRunner::RemovesceneResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RunnerAddSceneService);
};

class RunnerAddSceneService_Stub : public RunnerAddSceneService {
 public:
  RunnerAddSceneService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  RunnerAddSceneService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~RunnerAddSceneService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements RunnerAddSceneService ------------------------------------------

  void addscene(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SceneRunner::AddSceneRequest* request,
                       ::SceneRunner::AddSceneResponse* response,
                       ::google::protobuf::Closure* done);
  void removescene(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SceneRunner::RemovesceneRequest* request,
                       ::SceneRunner::RemovesceneResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RunnerAddSceneService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddSceneRequest

// uint64 sceneid = 1;
inline void AddSceneRequest::clear_sceneid() {
  sceneid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddSceneRequest::_internal_sceneid() const {
  return sceneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddSceneRequest::sceneid() const {
  // @@protoc_insertion_point(field_get:SceneRunner.AddSceneRequest.sceneid)
  return _internal_sceneid();
}
inline void AddSceneRequest::_internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sceneid_ = value;
}
inline void AddSceneRequest::set_sceneid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sceneid(value);
  // @@protoc_insertion_point(field_set:SceneRunner.AddSceneRequest.sceneid)
}

// -------------------------------------------------------------------

// AddSceneResponse

// int32 res = 1;
inline void AddSceneResponse::clear_res() {
  res_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddSceneResponse::_internal_res() const {
  return res_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddSceneResponse::res() const {
  // @@protoc_insertion_point(field_get:SceneRunner.AddSceneResponse.res)
  return _internal_res();
}
inline void AddSceneResponse::_internal_set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  res_ = value;
}
inline void AddSceneResponse::set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:SceneRunner.AddSceneResponse.res)
}

// -------------------------------------------------------------------

// RemovesceneRequest

// uint64 sceneid = 1;
inline void RemovesceneRequest::clear_sceneid() {
  sceneid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RemovesceneRequest::_internal_sceneid() const {
  return sceneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RemovesceneRequest::sceneid() const {
  // @@protoc_insertion_point(field_get:SceneRunner.RemovesceneRequest.sceneid)
  return _internal_sceneid();
}
inline void RemovesceneRequest::_internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sceneid_ = value;
}
inline void RemovesceneRequest::set_sceneid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sceneid(value);
  // @@protoc_insertion_point(field_set:SceneRunner.RemovesceneRequest.sceneid)
}

// -------------------------------------------------------------------

// RemovesceneResponse

// int32 res = 1;
inline void RemovesceneResponse::clear_res() {
  res_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemovesceneResponse::_internal_res() const {
  return res_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemovesceneResponse::res() const {
  // @@protoc_insertion_point(field_get:SceneRunner.RemovesceneResponse.res)
  return _internal_res();
}
inline void RemovesceneResponse::_internal_set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  res_ = value;
}
inline void RemovesceneResponse::set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:SceneRunner.RemovesceneResponse.res)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SceneRunner

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_runneraddscene_2eproto
