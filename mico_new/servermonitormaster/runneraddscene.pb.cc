// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: runneraddscene.proto

#include "runneraddscene.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace SceneRunner {
class AddSceneRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddSceneRequest> _instance;
} _AddSceneRequest_default_instance_;
class AddSceneResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddSceneResponse> _instance;
} _AddSceneResponse_default_instance_;
class RemovesceneRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemovesceneRequest> _instance;
} _RemovesceneRequest_default_instance_;
class RemovesceneResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemovesceneResponse> _instance;
} _RemovesceneResponse_default_instance_;
}  // namespace SceneRunner
static void InitDefaultsscc_info_AddSceneRequest_runneraddscene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SceneRunner::_AddSceneRequest_default_instance_;
    new (ptr) ::SceneRunner::AddSceneRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SceneRunner::AddSceneRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddSceneRequest_runneraddscene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddSceneRequest_runneraddscene_2eproto}, {}};

static void InitDefaultsscc_info_AddSceneResponse_runneraddscene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SceneRunner::_AddSceneResponse_default_instance_;
    new (ptr) ::SceneRunner::AddSceneResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SceneRunner::AddSceneResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddSceneResponse_runneraddscene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddSceneResponse_runneraddscene_2eproto}, {}};

static void InitDefaultsscc_info_RemovesceneRequest_runneraddscene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SceneRunner::_RemovesceneRequest_default_instance_;
    new (ptr) ::SceneRunner::RemovesceneRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SceneRunner::RemovesceneRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemovesceneRequest_runneraddscene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemovesceneRequest_runneraddscene_2eproto}, {}};

static void InitDefaultsscc_info_RemovesceneResponse_runneraddscene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SceneRunner::_RemovesceneResponse_default_instance_;
    new (ptr) ::SceneRunner::RemovesceneResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SceneRunner::RemovesceneResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemovesceneResponse_runneraddscene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemovesceneResponse_runneraddscene_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_runneraddscene_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_runneraddscene_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_runneraddscene_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_runneraddscene_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::AddSceneRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::AddSceneRequest, sceneid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::AddSceneResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::AddSceneResponse, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::RemovesceneRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::RemovesceneRequest, sceneid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::RemovesceneResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::RemovesceneResponse, res_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SceneRunner::AddSceneRequest)},
  { 6, -1, sizeof(::SceneRunner::AddSceneResponse)},
  { 12, -1, sizeof(::SceneRunner::RemovesceneRequest)},
  { 18, -1, sizeof(::SceneRunner::RemovesceneResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SceneRunner::_AddSceneRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SceneRunner::_AddSceneResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SceneRunner::_RemovesceneRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SceneRunner::_RemovesceneResponse_default_instance_),
};

const char descriptor_table_protodef_runneraddscene_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024runneraddscene.proto\022\013SceneRunner\"\"\n\017A"
  "ddSceneRequest\022\017\n\007sceneid\030\001 \001(\004\"\037\n\020AddSc"
  "eneResponse\022\013\n\003res\030\001 \001(\005\"%\n\022RemovesceneR"
  "equest\022\017\n\007sceneid\030\001 \001(\004\"\"\n\023RemovesceneRe"
  "sponse\022\013\n\003res\030\001 \001(\0052\262\001\n\025RunnerAddSceneSe"
  "rvice\022G\n\010addscene\022\034.SceneRunner.AddScene"
  "Request\032\035.SceneRunner.AddSceneResponse\022P"
  "\n\013removescene\022\037.SceneRunner.RemovesceneR"
  "equest\032 .SceneRunner.RemovesceneResponse"
  "B\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_runneraddscene_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_runneraddscene_2eproto_sccs[4] = {
  &scc_info_AddSceneRequest_runneraddscene_2eproto.base,
  &scc_info_AddSceneResponse_runneraddscene_2eproto.base,
  &scc_info_RemovesceneRequest_runneraddscene_2eproto.base,
  &scc_info_RemovesceneResponse_runneraddscene_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_runneraddscene_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_runneraddscene_2eproto = {
  false, false, descriptor_table_protodef_runneraddscene_2eproto, "runneraddscene.proto", 373,
  &descriptor_table_runneraddscene_2eproto_once, descriptor_table_runneraddscene_2eproto_sccs, descriptor_table_runneraddscene_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_runneraddscene_2eproto::offsets,
  file_level_metadata_runneraddscene_2eproto, 4, file_level_enum_descriptors_runneraddscene_2eproto, file_level_service_descriptors_runneraddscene_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_runneraddscene_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_runneraddscene_2eproto)), true);
namespace SceneRunner {

// ===================================================================

void AddSceneRequest::InitAsDefaultInstance() {
}
class AddSceneRequest::_Internal {
 public:
};

AddSceneRequest::AddSceneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SceneRunner.AddSceneRequest)
}
AddSceneRequest::AddSceneRequest(const AddSceneRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sceneid_ = from.sceneid_;
  // @@protoc_insertion_point(copy_constructor:SceneRunner.AddSceneRequest)
}

void AddSceneRequest::SharedCtor() {
  sceneid_ = PROTOBUF_ULONGLONG(0);
}

AddSceneRequest::~AddSceneRequest() {
  // @@protoc_insertion_point(destructor:SceneRunner.AddSceneRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddSceneRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddSceneRequest::ArenaDtor(void* object) {
  AddSceneRequest* _this = reinterpret_cast< AddSceneRequest* >(object);
  (void)_this;
}
void AddSceneRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddSceneRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddSceneRequest& AddSceneRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddSceneRequest_runneraddscene_2eproto.base);
  return *internal_default_instance();
}


void AddSceneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SceneRunner.AddSceneRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sceneid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddSceneRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 sceneid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddSceneRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SceneRunner.AddSceneRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sceneid = 1;
  if (this->sceneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sceneid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SceneRunner.AddSceneRequest)
  return target;
}

size_t AddSceneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SceneRunner.AddSceneRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sceneid = 1;
  if (this->sceneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sceneid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddSceneRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SceneRunner.AddSceneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddSceneRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddSceneRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SceneRunner.AddSceneRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SceneRunner.AddSceneRequest)
    MergeFrom(*source);
  }
}

void AddSceneRequest::MergeFrom(const AddSceneRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SceneRunner.AddSceneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sceneid() != 0) {
    _internal_set_sceneid(from._internal_sceneid());
  }
}

void AddSceneRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SceneRunner.AddSceneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddSceneRequest::CopyFrom(const AddSceneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SceneRunner.AddSceneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddSceneRequest::IsInitialized() const {
  return true;
}

void AddSceneRequest::InternalSwap(AddSceneRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(sceneid_, other->sceneid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddSceneRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddSceneResponse::InitAsDefaultInstance() {
}
class AddSceneResponse::_Internal {
 public:
};

AddSceneResponse::AddSceneResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SceneRunner.AddSceneResponse)
}
AddSceneResponse::AddSceneResponse(const AddSceneResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:SceneRunner.AddSceneResponse)
}

void AddSceneResponse::SharedCtor() {
  res_ = 0;
}

AddSceneResponse::~AddSceneResponse() {
  // @@protoc_insertion_point(destructor:SceneRunner.AddSceneResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddSceneResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddSceneResponse::ArenaDtor(void* object) {
  AddSceneResponse* _this = reinterpret_cast< AddSceneResponse* >(object);
  (void)_this;
}
void AddSceneResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddSceneResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddSceneResponse& AddSceneResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddSceneResponse_runneraddscene_2eproto.base);
  return *internal_default_instance();
}


void AddSceneResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SceneRunner.AddSceneResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddSceneResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          res_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddSceneResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SceneRunner.AddSceneResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 res = 1;
  if (this->res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SceneRunner.AddSceneResponse)
  return target;
}

size_t AddSceneResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SceneRunner.AddSceneResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 res = 1;
  if (this->res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_res());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddSceneResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SceneRunner.AddSceneResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddSceneResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddSceneResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SceneRunner.AddSceneResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SceneRunner.AddSceneResponse)
    MergeFrom(*source);
  }
}

void AddSceneResponse::MergeFrom(const AddSceneResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SceneRunner.AddSceneResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res() != 0) {
    _internal_set_res(from._internal_res());
  }
}

void AddSceneResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SceneRunner.AddSceneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddSceneResponse::CopyFrom(const AddSceneResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SceneRunner.AddSceneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddSceneResponse::IsInitialized() const {
  return true;
}

void AddSceneResponse::InternalSwap(AddSceneResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddSceneResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemovesceneRequest::InitAsDefaultInstance() {
}
class RemovesceneRequest::_Internal {
 public:
};

RemovesceneRequest::RemovesceneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SceneRunner.RemovesceneRequest)
}
RemovesceneRequest::RemovesceneRequest(const RemovesceneRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sceneid_ = from.sceneid_;
  // @@protoc_insertion_point(copy_constructor:SceneRunner.RemovesceneRequest)
}

void RemovesceneRequest::SharedCtor() {
  sceneid_ = PROTOBUF_ULONGLONG(0);
}

RemovesceneRequest::~RemovesceneRequest() {
  // @@protoc_insertion_point(destructor:SceneRunner.RemovesceneRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemovesceneRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemovesceneRequest::ArenaDtor(void* object) {
  RemovesceneRequest* _this = reinterpret_cast< RemovesceneRequest* >(object);
  (void)_this;
}
void RemovesceneRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemovesceneRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemovesceneRequest& RemovesceneRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemovesceneRequest_runneraddscene_2eproto.base);
  return *internal_default_instance();
}


void RemovesceneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SceneRunner.RemovesceneRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sceneid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemovesceneRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 sceneid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemovesceneRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SceneRunner.RemovesceneRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sceneid = 1;
  if (this->sceneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sceneid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SceneRunner.RemovesceneRequest)
  return target;
}

size_t RemovesceneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SceneRunner.RemovesceneRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sceneid = 1;
  if (this->sceneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sceneid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemovesceneRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SceneRunner.RemovesceneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemovesceneRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemovesceneRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SceneRunner.RemovesceneRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SceneRunner.RemovesceneRequest)
    MergeFrom(*source);
  }
}

void RemovesceneRequest::MergeFrom(const RemovesceneRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SceneRunner.RemovesceneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sceneid() != 0) {
    _internal_set_sceneid(from._internal_sceneid());
  }
}

void RemovesceneRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SceneRunner.RemovesceneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovesceneRequest::CopyFrom(const RemovesceneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SceneRunner.RemovesceneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovesceneRequest::IsInitialized() const {
  return true;
}

void RemovesceneRequest::InternalSwap(RemovesceneRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(sceneid_, other->sceneid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemovesceneRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemovesceneResponse::InitAsDefaultInstance() {
}
class RemovesceneResponse::_Internal {
 public:
};

RemovesceneResponse::RemovesceneResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SceneRunner.RemovesceneResponse)
}
RemovesceneResponse::RemovesceneResponse(const RemovesceneResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:SceneRunner.RemovesceneResponse)
}

void RemovesceneResponse::SharedCtor() {
  res_ = 0;
}

RemovesceneResponse::~RemovesceneResponse() {
  // @@protoc_insertion_point(destructor:SceneRunner.RemovesceneResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemovesceneResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemovesceneResponse::ArenaDtor(void* object) {
  RemovesceneResponse* _this = reinterpret_cast< RemovesceneResponse* >(object);
  (void)_this;
}
void RemovesceneResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemovesceneResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemovesceneResponse& RemovesceneResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemovesceneResponse_runneraddscene_2eproto.base);
  return *internal_default_instance();
}


void RemovesceneResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SceneRunner.RemovesceneResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemovesceneResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          res_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemovesceneResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SceneRunner.RemovesceneResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 res = 1;
  if (this->res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SceneRunner.RemovesceneResponse)
  return target;
}

size_t RemovesceneResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SceneRunner.RemovesceneResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 res = 1;
  if (this->res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_res());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemovesceneResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SceneRunner.RemovesceneResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemovesceneResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemovesceneResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SceneRunner.RemovesceneResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SceneRunner.RemovesceneResponse)
    MergeFrom(*source);
  }
}

void RemovesceneResponse::MergeFrom(const RemovesceneResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SceneRunner.RemovesceneResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res() != 0) {
    _internal_set_res(from._internal_res());
  }
}

void RemovesceneResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SceneRunner.RemovesceneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovesceneResponse::CopyFrom(const RemovesceneResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SceneRunner.RemovesceneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovesceneResponse::IsInitialized() const {
  return true;
}

void RemovesceneResponse::InternalSwap(RemovesceneResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemovesceneResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

RunnerAddSceneService::~RunnerAddSceneService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RunnerAddSceneService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_runneraddscene_2eproto);
  return file_level_service_descriptors_runneraddscene_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RunnerAddSceneService::GetDescriptor() {
  return descriptor();
}

void RunnerAddSceneService::addscene(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::SceneRunner::AddSceneRequest*,
                         ::SceneRunner::AddSceneResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method addscene() not implemented.");
  done->Run();
}

void RunnerAddSceneService::removescene(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::SceneRunner::RemovesceneRequest*,
                         ::SceneRunner::RemovesceneResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method removescene() not implemented.");
  done->Run();
}

void RunnerAddSceneService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_runneraddscene_2eproto[0]);
  switch(method->index()) {
    case 0:
      addscene(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::SceneRunner::AddSceneRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::SceneRunner::AddSceneResponse*>(
                 response),
             done);
      break;
    case 1:
      removescene(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::SceneRunner::RemovesceneRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::SceneRunner::RemovesceneResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RunnerAddSceneService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SceneRunner::AddSceneRequest::default_instance();
    case 1:
      return ::SceneRunner::RemovesceneRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RunnerAddSceneService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SceneRunner::AddSceneResponse::default_instance();
    case 1:
      return ::SceneRunner::RemovesceneResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RunnerAddSceneService_Stub::RunnerAddSceneService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RunnerAddSceneService_Stub::RunnerAddSceneService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
RunnerAddSceneService_Stub::~RunnerAddSceneService_Stub() {
  if (owns_channel_) delete channel_;
}

void RunnerAddSceneService_Stub::addscene(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::SceneRunner::AddSceneRequest* request,
                              ::SceneRunner::AddSceneResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void RunnerAddSceneService_Stub::removescene(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::SceneRunner::RemovesceneRequest* request,
                              ::SceneRunner::RemovesceneResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SceneRunner
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SceneRunner::AddSceneRequest* Arena::CreateMaybeMessage< ::SceneRunner::AddSceneRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SceneRunner::AddSceneRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SceneRunner::AddSceneResponse* Arena::CreateMaybeMessage< ::SceneRunner::AddSceneResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SceneRunner::AddSceneResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SceneRunner::RemovesceneRequest* Arena::CreateMaybeMessage< ::SceneRunner::RemovesceneRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SceneRunner::RemovesceneRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SceneRunner::RemovesceneResponse* Arena::CreateMaybeMessage< ::SceneRunner::RemovesceneResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SceneRunner::RemovesceneResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
