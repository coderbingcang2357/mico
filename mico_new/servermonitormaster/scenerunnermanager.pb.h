// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenerunnermanager.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scenerunnermanager_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scenerunnermanager_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scenerunnermanager_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scenerunnermanager_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenerunnermanager_2eproto;
namespace SceneRunner {
class IsSceneRunningRequest;
class IsSceneRunningRequestDefaultTypeInternal;
extern IsSceneRunningRequestDefaultTypeInternal _IsSceneRunningRequest_default_instance_;
class IsSceneRunningResponse;
class IsSceneRunningResponseDefaultTypeInternal;
extern IsSceneRunningResponseDefaultTypeInternal _IsSceneRunningResponse_default_instance_;
class StartRunningRequest;
class StartRunningRequestDefaultTypeInternal;
extern StartRunningRequestDefaultTypeInternal _StartRunningRequest_default_instance_;
class StartRunningResponse;
class StartRunningResponseDefaultTypeInternal;
extern StartRunningResponseDefaultTypeInternal _StartRunningResponse_default_instance_;
class StopRunningReponse;
class StopRunningReponseDefaultTypeInternal;
extern StopRunningReponseDefaultTypeInternal _StopRunningReponse_default_instance_;
class StopRunningRequest;
class StopRunningRequestDefaultTypeInternal;
extern StopRunningRequestDefaultTypeInternal _StopRunningRequest_default_instance_;
}  // namespace SceneRunner
PROTOBUF_NAMESPACE_OPEN
template<> ::SceneRunner::IsSceneRunningRequest* Arena::CreateMaybeMessage<::SceneRunner::IsSceneRunningRequest>(Arena*);
template<> ::SceneRunner::IsSceneRunningResponse* Arena::CreateMaybeMessage<::SceneRunner::IsSceneRunningResponse>(Arena*);
template<> ::SceneRunner::StartRunningRequest* Arena::CreateMaybeMessage<::SceneRunner::StartRunningRequest>(Arena*);
template<> ::SceneRunner::StartRunningResponse* Arena::CreateMaybeMessage<::SceneRunner::StartRunningResponse>(Arena*);
template<> ::SceneRunner::StopRunningReponse* Arena::CreateMaybeMessage<::SceneRunner::StopRunningReponse>(Arena*);
template<> ::SceneRunner::StopRunningRequest* Arena::CreateMaybeMessage<::SceneRunner::StopRunningRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SceneRunner {

// ===================================================================

class IsSceneRunningRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SceneRunner.IsSceneRunningRequest) */ {
 public:
  inline IsSceneRunningRequest() : IsSceneRunningRequest(nullptr) {}
  virtual ~IsSceneRunningRequest();

  IsSceneRunningRequest(const IsSceneRunningRequest& from);
  IsSceneRunningRequest(IsSceneRunningRequest&& from) noexcept
    : IsSceneRunningRequest() {
    *this = ::std::move(from);
  }

  inline IsSceneRunningRequest& operator=(const IsSceneRunningRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsSceneRunningRequest& operator=(IsSceneRunningRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsSceneRunningRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsSceneRunningRequest* internal_default_instance() {
    return reinterpret_cast<const IsSceneRunningRequest*>(
               &_IsSceneRunningRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IsSceneRunningRequest& a, IsSceneRunningRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IsSceneRunningRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsSceneRunningRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsSceneRunningRequest* New() const final {
    return CreateMaybeMessage<IsSceneRunningRequest>(nullptr);
  }

  IsSceneRunningRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsSceneRunningRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsSceneRunningRequest& from);
  void MergeFrom(const IsSceneRunningRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsSceneRunningRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SceneRunner.IsSceneRunningRequest";
  }
  protected:
  explicit IsSceneRunningRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenerunnermanager_2eproto);
    return ::descriptor_table_scenerunnermanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneidFieldNumber = 1,
  };
  // uint64 sceneid = 1;
  void clear_sceneid();
  ::PROTOBUF_NAMESPACE_ID::uint64 sceneid() const;
  void set_sceneid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sceneid() const;
  void _internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SceneRunner.IsSceneRunningRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sceneid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenerunnermanager_2eproto;
};
// -------------------------------------------------------------------

class IsSceneRunningResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SceneRunner.IsSceneRunningResponse) */ {
 public:
  inline IsSceneRunningResponse() : IsSceneRunningResponse(nullptr) {}
  virtual ~IsSceneRunningResponse();

  IsSceneRunningResponse(const IsSceneRunningResponse& from);
  IsSceneRunningResponse(IsSceneRunningResponse&& from) noexcept
    : IsSceneRunningResponse() {
    *this = ::std::move(from);
  }

  inline IsSceneRunningResponse& operator=(const IsSceneRunningResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsSceneRunningResponse& operator=(IsSceneRunningResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsSceneRunningResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsSceneRunningResponse* internal_default_instance() {
    return reinterpret_cast<const IsSceneRunningResponse*>(
               &_IsSceneRunningResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IsSceneRunningResponse& a, IsSceneRunningResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IsSceneRunningResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsSceneRunningResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsSceneRunningResponse* New() const final {
    return CreateMaybeMessage<IsSceneRunningResponse>(nullptr);
  }

  IsSceneRunningResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsSceneRunningResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsSceneRunningResponse& from);
  void MergeFrom(const IsSceneRunningResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsSceneRunningResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SceneRunner.IsSceneRunningResponse";
  }
  protected:
  explicit IsSceneRunningResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenerunnermanager_2eproto);
    return ::descriptor_table_scenerunnermanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // uint32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SceneRunner.IsSceneRunningResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenerunnermanager_2eproto;
};
// -------------------------------------------------------------------

class StartRunningRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SceneRunner.StartRunningRequest) */ {
 public:
  inline StartRunningRequest() : StartRunningRequest(nullptr) {}
  virtual ~StartRunningRequest();

  StartRunningRequest(const StartRunningRequest& from);
  StartRunningRequest(StartRunningRequest&& from) noexcept
    : StartRunningRequest() {
    *this = ::std::move(from);
  }

  inline StartRunningRequest& operator=(const StartRunningRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRunningRequest& operator=(StartRunningRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartRunningRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartRunningRequest* internal_default_instance() {
    return reinterpret_cast<const StartRunningRequest*>(
               &_StartRunningRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StartRunningRequest& a, StartRunningRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartRunningRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartRunningRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartRunningRequest* New() const final {
    return CreateMaybeMessage<StartRunningRequest>(nullptr);
  }

  StartRunningRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartRunningRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartRunningRequest& from);
  void MergeFrom(const StartRunningRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartRunningRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SceneRunner.StartRunningRequest";
  }
  protected:
  explicit StartRunningRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenerunnermanager_2eproto);
    return ::descriptor_table_scenerunnermanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneidFieldNumber = 1,
  };
  // uint64 sceneid = 1;
  void clear_sceneid();
  ::PROTOBUF_NAMESPACE_ID::uint64 sceneid() const;
  void set_sceneid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sceneid() const;
  void _internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SceneRunner.StartRunningRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sceneid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenerunnermanager_2eproto;
};
// -------------------------------------------------------------------

class StartRunningResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SceneRunner.StartRunningResponse) */ {
 public:
  inline StartRunningResponse() : StartRunningResponse(nullptr) {}
  virtual ~StartRunningResponse();

  StartRunningResponse(const StartRunningResponse& from);
  StartRunningResponse(StartRunningResponse&& from) noexcept
    : StartRunningResponse() {
    *this = ::std::move(from);
  }

  inline StartRunningResponse& operator=(const StartRunningResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRunningResponse& operator=(StartRunningResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartRunningResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartRunningResponse* internal_default_instance() {
    return reinterpret_cast<const StartRunningResponse*>(
               &_StartRunningResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StartRunningResponse& a, StartRunningResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartRunningResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartRunningResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartRunningResponse* New() const final {
    return CreateMaybeMessage<StartRunningResponse>(nullptr);
  }

  StartRunningResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartRunningResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartRunningResponse& from);
  void MergeFrom(const StartRunningResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartRunningResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SceneRunner.StartRunningResponse";
  }
  protected:
  explicit StartRunningResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenerunnermanager_2eproto);
    return ::descriptor_table_scenerunnermanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
  };
  // uint64 res = 1;
  void clear_res();
  ::PROTOBUF_NAMESPACE_ID::uint64 res() const;
  void set_res(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_res() const;
  void _internal_set_res(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SceneRunner.StartRunningResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenerunnermanager_2eproto;
};
// -------------------------------------------------------------------

class StopRunningRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SceneRunner.StopRunningRequest) */ {
 public:
  inline StopRunningRequest() : StopRunningRequest(nullptr) {}
  virtual ~StopRunningRequest();

  StopRunningRequest(const StopRunningRequest& from);
  StopRunningRequest(StopRunningRequest&& from) noexcept
    : StopRunningRequest() {
    *this = ::std::move(from);
  }

  inline StopRunningRequest& operator=(const StopRunningRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRunningRequest& operator=(StopRunningRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRunningRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopRunningRequest* internal_default_instance() {
    return reinterpret_cast<const StopRunningRequest*>(
               &_StopRunningRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StopRunningRequest& a, StopRunningRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRunningRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRunningRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRunningRequest* New() const final {
    return CreateMaybeMessage<StopRunningRequest>(nullptr);
  }

  StopRunningRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRunningRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopRunningRequest& from);
  void MergeFrom(const StopRunningRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRunningRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SceneRunner.StopRunningRequest";
  }
  protected:
  explicit StopRunningRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenerunnermanager_2eproto);
    return ::descriptor_table_scenerunnermanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneidFieldNumber = 1,
  };
  // uint64 sceneid = 1;
  void clear_sceneid();
  ::PROTOBUF_NAMESPACE_ID::uint64 sceneid() const;
  void set_sceneid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sceneid() const;
  void _internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SceneRunner.StopRunningRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sceneid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenerunnermanager_2eproto;
};
// -------------------------------------------------------------------

class StopRunningReponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SceneRunner.StopRunningReponse) */ {
 public:
  inline StopRunningReponse() : StopRunningReponse(nullptr) {}
  virtual ~StopRunningReponse();

  StopRunningReponse(const StopRunningReponse& from);
  StopRunningReponse(StopRunningReponse&& from) noexcept
    : StopRunningReponse() {
    *this = ::std::move(from);
  }

  inline StopRunningReponse& operator=(const StopRunningReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRunningReponse& operator=(StopRunningReponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRunningReponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopRunningReponse* internal_default_instance() {
    return reinterpret_cast<const StopRunningReponse*>(
               &_StopRunningReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StopRunningReponse& a, StopRunningReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRunningReponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRunningReponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRunningReponse* New() const final {
    return CreateMaybeMessage<StopRunningReponse>(nullptr);
  }

  StopRunningReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRunningReponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopRunningReponse& from);
  void MergeFrom(const StopRunningReponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRunningReponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SceneRunner.StopRunningReponse";
  }
  protected:
  explicit StopRunningReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenerunnermanager_2eproto);
    return ::descriptor_table_scenerunnermanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
  };
  // uint64 res = 1;
  void clear_res();
  ::PROTOBUF_NAMESPACE_ID::uint64 res() const;
  void set_res(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_res() const;
  void _internal_set_res(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SceneRunner.StopRunningReponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenerunnermanager_2eproto;
};
// ===================================================================

class IsSceneRunningService_Stub;

class IsSceneRunningService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline IsSceneRunningService() {};
 public:
  virtual ~IsSceneRunningService();

  typedef IsSceneRunningService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void isSceneRun(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SceneRunner::IsSceneRunningRequest* request,
                       ::SceneRunner::IsSceneRunningResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void startRunning(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SceneRunner::StartRunningRequest* request,
                       ::SceneRunner::StartRunningResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void stopRunning(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SceneRunner::StopRunningRequest* request,
                       ::SceneRunner::StopRunningReponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(IsSceneRunningService);
};

class IsSceneRunningService_Stub : public IsSceneRunningService {
 public:
  IsSceneRunningService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  IsSceneRunningService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~IsSceneRunningService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements IsSceneRunningService ------------------------------------------

  void isSceneRun(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SceneRunner::IsSceneRunningRequest* request,
                       ::SceneRunner::IsSceneRunningResponse* response,
                       ::google::protobuf::Closure* done);
  void startRunning(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SceneRunner::StartRunningRequest* request,
                       ::SceneRunner::StartRunningResponse* response,
                       ::google::protobuf::Closure* done);
  void stopRunning(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SceneRunner::StopRunningRequest* request,
                       ::SceneRunner::StopRunningReponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(IsSceneRunningService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IsSceneRunningRequest

// uint64 sceneid = 1;
inline void IsSceneRunningRequest::clear_sceneid() {
  sceneid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IsSceneRunningRequest::_internal_sceneid() const {
  return sceneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IsSceneRunningRequest::sceneid() const {
  // @@protoc_insertion_point(field_get:SceneRunner.IsSceneRunningRequest.sceneid)
  return _internal_sceneid();
}
inline void IsSceneRunningRequest::_internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sceneid_ = value;
}
inline void IsSceneRunningRequest::set_sceneid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sceneid(value);
  // @@protoc_insertion_point(field_set:SceneRunner.IsSceneRunningRequest.sceneid)
}

// -------------------------------------------------------------------

// IsSceneRunningResponse

// uint32 status = 1;
inline void IsSceneRunningResponse::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IsSceneRunningResponse::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IsSceneRunningResponse::status() const {
  // @@protoc_insertion_point(field_get:SceneRunner.IsSceneRunningResponse.status)
  return _internal_status();
}
inline void IsSceneRunningResponse::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void IsSceneRunningResponse::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:SceneRunner.IsSceneRunningResponse.status)
}

// -------------------------------------------------------------------

// StartRunningRequest

// uint64 sceneid = 1;
inline void StartRunningRequest::clear_sceneid() {
  sceneid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartRunningRequest::_internal_sceneid() const {
  return sceneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartRunningRequest::sceneid() const {
  // @@protoc_insertion_point(field_get:SceneRunner.StartRunningRequest.sceneid)
  return _internal_sceneid();
}
inline void StartRunningRequest::_internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sceneid_ = value;
}
inline void StartRunningRequest::set_sceneid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sceneid(value);
  // @@protoc_insertion_point(field_set:SceneRunner.StartRunningRequest.sceneid)
}

// -------------------------------------------------------------------

// StartRunningResponse

// uint64 res = 1;
inline void StartRunningResponse::clear_res() {
  res_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartRunningResponse::_internal_res() const {
  return res_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartRunningResponse::res() const {
  // @@protoc_insertion_point(field_get:SceneRunner.StartRunningResponse.res)
  return _internal_res();
}
inline void StartRunningResponse::_internal_set_res(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  res_ = value;
}
inline void StartRunningResponse::set_res(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:SceneRunner.StartRunningResponse.res)
}

// -------------------------------------------------------------------

// StopRunningRequest

// uint64 sceneid = 1;
inline void StopRunningRequest::clear_sceneid() {
  sceneid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StopRunningRequest::_internal_sceneid() const {
  return sceneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StopRunningRequest::sceneid() const {
  // @@protoc_insertion_point(field_get:SceneRunner.StopRunningRequest.sceneid)
  return _internal_sceneid();
}
inline void StopRunningRequest::_internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sceneid_ = value;
}
inline void StopRunningRequest::set_sceneid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sceneid(value);
  // @@protoc_insertion_point(field_set:SceneRunner.StopRunningRequest.sceneid)
}

// -------------------------------------------------------------------

// StopRunningReponse

// uint64 res = 1;
inline void StopRunningReponse::clear_res() {
  res_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StopRunningReponse::_internal_res() const {
  return res_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StopRunningReponse::res() const {
  // @@protoc_insertion_point(field_get:SceneRunner.StopRunningReponse.res)
  return _internal_res();
}
inline void StopRunningReponse::_internal_set_res(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  res_ = value;
}
inline void StopRunningReponse::set_res(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:SceneRunner.StopRunningReponse.res)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SceneRunner

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scenerunnermanager_2eproto
