// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: runnerregister.proto

#include "runnerregister.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace SceneRunner {
class RunnerRegisteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunnerRegisteRequest> _instance;
} _RunnerRegisteRequest_default_instance_;
class RunnerRegisteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunnerRegisteResponse> _instance;
} _RunnerRegisteResponse_default_instance_;
class RunnerUnregisterRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunnerUnregisterRequest> _instance;
} _RunnerUnregisterRequest_default_instance_;
class RunnerUnregisterResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunnerUnregisterResponse> _instance;
} _RunnerUnregisterResponse_default_instance_;
class RunnerHeartbeatRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunnerHeartbeatRequest> _instance;
} _RunnerHeartbeatRequest_default_instance_;
class RunnerHeartbeatResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunnerHeartbeatResponse> _instance;
} _RunnerHeartbeatResponse_default_instance_;
}  // namespace SceneRunner
static void InitDefaultsscc_info_RunnerHeartbeatRequest_runnerregister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SceneRunner::_RunnerHeartbeatRequest_default_instance_;
    new (ptr) ::SceneRunner::RunnerHeartbeatRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SceneRunner::RunnerHeartbeatRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RunnerHeartbeatRequest_runnerregister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RunnerHeartbeatRequest_runnerregister_2eproto}, {}};

static void InitDefaultsscc_info_RunnerHeartbeatResponse_runnerregister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SceneRunner::_RunnerHeartbeatResponse_default_instance_;
    new (ptr) ::SceneRunner::RunnerHeartbeatResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SceneRunner::RunnerHeartbeatResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RunnerHeartbeatResponse_runnerregister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RunnerHeartbeatResponse_runnerregister_2eproto}, {}};

static void InitDefaultsscc_info_RunnerRegisteRequest_runnerregister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SceneRunner::_RunnerRegisteRequest_default_instance_;
    new (ptr) ::SceneRunner::RunnerRegisteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SceneRunner::RunnerRegisteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RunnerRegisteRequest_runnerregister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RunnerRegisteRequest_runnerregister_2eproto}, {}};

static void InitDefaultsscc_info_RunnerRegisteResponse_runnerregister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SceneRunner::_RunnerRegisteResponse_default_instance_;
    new (ptr) ::SceneRunner::RunnerRegisteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SceneRunner::RunnerRegisteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RunnerRegisteResponse_runnerregister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RunnerRegisteResponse_runnerregister_2eproto}, {}};

static void InitDefaultsscc_info_RunnerUnregisterRequest_runnerregister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SceneRunner::_RunnerUnregisterRequest_default_instance_;
    new (ptr) ::SceneRunner::RunnerUnregisterRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SceneRunner::RunnerUnregisterRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RunnerUnregisterRequest_runnerregister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RunnerUnregisterRequest_runnerregister_2eproto}, {}};

static void InitDefaultsscc_info_RunnerUnregisterResponse_runnerregister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SceneRunner::_RunnerUnregisterResponse_default_instance_;
    new (ptr) ::SceneRunner::RunnerUnregisterResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SceneRunner::RunnerUnregisterResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RunnerUnregisterResponse_runnerregister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RunnerUnregisterResponse_runnerregister_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_runnerregister_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_runnerregister_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_runnerregister_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_runnerregister_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::RunnerRegisteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::RunnerRegisteRequest, nodeid_),
  PROTOBUF_FIELD_OFFSET(::SceneRunner::RunnerRegisteRequest, ip_),
  PROTOBUF_FIELD_OFFSET(::SceneRunner::RunnerRegisteRequest, port_),
  PROTOBUF_FIELD_OFFSET(::SceneRunner::RunnerRegisteRequest, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::RunnerRegisteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::RunnerRegisteResponse, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::RunnerUnregisterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::RunnerUnregisterRequest, nodeid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::RunnerUnregisterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::RunnerUnregisterResponse, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::RunnerHeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::RunnerHeartbeatRequest, nodeid_),
  PROTOBUF_FIELD_OFFSET(::SceneRunner::RunnerHeartbeatRequest, runningcount_),
  PROTOBUF_FIELD_OFFSET(::SceneRunner::RunnerHeartbeatRequest, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::RunnerHeartbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::RunnerHeartbeatResponse, res_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SceneRunner::RunnerRegisteRequest)},
  { 9, -1, sizeof(::SceneRunner::RunnerRegisteResponse)},
  { 15, -1, sizeof(::SceneRunner::RunnerUnregisterRequest)},
  { 21, -1, sizeof(::SceneRunner::RunnerUnregisterResponse)},
  { 27, -1, sizeof(::SceneRunner::RunnerHeartbeatRequest)},
  { 35, -1, sizeof(::SceneRunner::RunnerHeartbeatResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SceneRunner::_RunnerRegisteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SceneRunner::_RunnerRegisteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SceneRunner::_RunnerUnregisterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SceneRunner::_RunnerUnregisterResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SceneRunner::_RunnerHeartbeatRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SceneRunner::_RunnerHeartbeatResponse_default_instance_),
};

const char descriptor_table_protodef_runnerregister_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024runnerregister.proto\022\013SceneRunner\"P\n\024R"
  "unnerRegisteRequest\022\016\n\006nodeid\030\001 \001(\005\022\n\n\002i"
  "p\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\022\016\n\006status\030\004 \001(\005\"$\n"
  "\025RunnerRegisteResponse\022\013\n\003res\030\001 \001(\r\")\n\027R"
  "unnerUnregisterRequest\022\016\n\006nodeid\030\001 \001(\005\"\'"
  "\n\030RunnerUnregisterResponse\022\013\n\003res\030\001 \001(\005\""
  "N\n\026RunnerHeartbeatRequest\022\016\n\006nodeid\030\001 \001("
  "\005\022\024\n\014runningcount\030\002 \001(\005\022\016\n\006status\030\003 \001(\005\""
  "&\n\027RunnerHeartbeatResponse\022\013\n\003res\030\001 \001(\0052"
  "\251\002\n\025RunnerRegisterService\022W\n\016registerrun"
  "ner\022!.SceneRunner.RunnerRegisteRequest\032\""
  ".SceneRunner.RunnerRegisteResponse\022_\n\020un"
  "registerrunner\022$.SceneRunner.RunnerUnreg"
  "isterRequest\032%.SceneRunner.RunnerUnregis"
  "terResponse\022V\n\theartbeat\022#.SceneRunner.R"
  "unnerHeartbeatRequest\032$.SceneRunner.Runn"
  "erHeartbeatResponseB\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_runnerregister_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_runnerregister_2eproto_sccs[6] = {
  &scc_info_RunnerHeartbeatRequest_runnerregister_2eproto.base,
  &scc_info_RunnerHeartbeatResponse_runnerregister_2eproto.base,
  &scc_info_RunnerRegisteRequest_runnerregister_2eproto.base,
  &scc_info_RunnerRegisteResponse_runnerregister_2eproto.base,
  &scc_info_RunnerUnregisterRequest_runnerregister_2eproto.base,
  &scc_info_RunnerUnregisterResponse_runnerregister_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_runnerregister_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_runnerregister_2eproto = {
  false, false, descriptor_table_protodef_runnerregister_2eproto, "runnerregister.proto", 672,
  &descriptor_table_runnerregister_2eproto_once, descriptor_table_runnerregister_2eproto_sccs, descriptor_table_runnerregister_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_runnerregister_2eproto::offsets,
  file_level_metadata_runnerregister_2eproto, 6, file_level_enum_descriptors_runnerregister_2eproto, file_level_service_descriptors_runnerregister_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_runnerregister_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_runnerregister_2eproto)), true);
namespace SceneRunner {

// ===================================================================

void RunnerRegisteRequest::InitAsDefaultInstance() {
}
class RunnerRegisteRequest::_Internal {
 public:
};

RunnerRegisteRequest::RunnerRegisteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SceneRunner.RunnerRegisteRequest)
}
RunnerRegisteRequest::RunnerRegisteRequest(const RunnerRegisteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  ::memcpy(&nodeid_, &from.nodeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&nodeid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:SceneRunner.RunnerRegisteRequest)
}

void RunnerRegisteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RunnerRegisteRequest_runnerregister_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nodeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&nodeid_)) + sizeof(status_));
}

RunnerRegisteRequest::~RunnerRegisteRequest() {
  // @@protoc_insertion_point(destructor:SceneRunner.RunnerRegisteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RunnerRegisteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RunnerRegisteRequest::ArenaDtor(void* object) {
  RunnerRegisteRequest* _this = reinterpret_cast< RunnerRegisteRequest* >(object);
  (void)_this;
}
void RunnerRegisteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunnerRegisteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunnerRegisteRequest& RunnerRegisteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunnerRegisteRequest_runnerregister_2eproto.base);
  return *internal_default_instance();
}


void RunnerRegisteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SceneRunner.RunnerRegisteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&nodeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&nodeid_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunnerRegisteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 nodeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SceneRunner.RunnerRegisteRequest.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RunnerRegisteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SceneRunner.RunnerRegisteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nodeid = 1;
  if (this->nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_nodeid(), target);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SceneRunner.RunnerRegisteRequest.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SceneRunner.RunnerRegisteRequest)
  return target;
}

size_t RunnerRegisteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SceneRunner.RunnerRegisteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int32 nodeid = 1;
  if (this->nodeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nodeid());
  }

  // int32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // int32 status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunnerRegisteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SceneRunner.RunnerRegisteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RunnerRegisteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RunnerRegisteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SceneRunner.RunnerRegisteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SceneRunner.RunnerRegisteRequest)
    MergeFrom(*source);
  }
}

void RunnerRegisteRequest::MergeFrom(const RunnerRegisteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SceneRunner.RunnerRegisteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.nodeid() != 0) {
    _internal_set_nodeid(from._internal_nodeid());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void RunnerRegisteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SceneRunner.RunnerRegisteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunnerRegisteRequest::CopyFrom(const RunnerRegisteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SceneRunner.RunnerRegisteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunnerRegisteRequest::IsInitialized() const {
  return true;
}

void RunnerRegisteRequest::InternalSwap(RunnerRegisteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RunnerRegisteRequest, status_)
      + sizeof(RunnerRegisteRequest::status_)
      - PROTOBUF_FIELD_OFFSET(RunnerRegisteRequest, nodeid_)>(
          reinterpret_cast<char*>(&nodeid_),
          reinterpret_cast<char*>(&other->nodeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RunnerRegisteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RunnerRegisteResponse::InitAsDefaultInstance() {
}
class RunnerRegisteResponse::_Internal {
 public:
};

RunnerRegisteResponse::RunnerRegisteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SceneRunner.RunnerRegisteResponse)
}
RunnerRegisteResponse::RunnerRegisteResponse(const RunnerRegisteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:SceneRunner.RunnerRegisteResponse)
}

void RunnerRegisteResponse::SharedCtor() {
  res_ = 0u;
}

RunnerRegisteResponse::~RunnerRegisteResponse() {
  // @@protoc_insertion_point(destructor:SceneRunner.RunnerRegisteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RunnerRegisteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RunnerRegisteResponse::ArenaDtor(void* object) {
  RunnerRegisteResponse* _this = reinterpret_cast< RunnerRegisteResponse* >(object);
  (void)_this;
}
void RunnerRegisteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunnerRegisteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunnerRegisteResponse& RunnerRegisteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunnerRegisteResponse_runnerregister_2eproto.base);
  return *internal_default_instance();
}


void RunnerRegisteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SceneRunner.RunnerRegisteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunnerRegisteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          res_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RunnerRegisteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SceneRunner.RunnerRegisteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 res = 1;
  if (this->res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SceneRunner.RunnerRegisteResponse)
  return target;
}

size_t RunnerRegisteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SceneRunner.RunnerRegisteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 res = 1;
  if (this->res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_res());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunnerRegisteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SceneRunner.RunnerRegisteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RunnerRegisteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RunnerRegisteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SceneRunner.RunnerRegisteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SceneRunner.RunnerRegisteResponse)
    MergeFrom(*source);
  }
}

void RunnerRegisteResponse::MergeFrom(const RunnerRegisteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SceneRunner.RunnerRegisteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res() != 0) {
    _internal_set_res(from._internal_res());
  }
}

void RunnerRegisteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SceneRunner.RunnerRegisteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunnerRegisteResponse::CopyFrom(const RunnerRegisteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SceneRunner.RunnerRegisteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunnerRegisteResponse::IsInitialized() const {
  return true;
}

void RunnerRegisteResponse::InternalSwap(RunnerRegisteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RunnerRegisteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RunnerUnregisterRequest::InitAsDefaultInstance() {
}
class RunnerUnregisterRequest::_Internal {
 public:
};

RunnerUnregisterRequest::RunnerUnregisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SceneRunner.RunnerUnregisterRequest)
}
RunnerUnregisterRequest::RunnerUnregisterRequest(const RunnerUnregisterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nodeid_ = from.nodeid_;
  // @@protoc_insertion_point(copy_constructor:SceneRunner.RunnerUnregisterRequest)
}

void RunnerUnregisterRequest::SharedCtor() {
  nodeid_ = 0;
}

RunnerUnregisterRequest::~RunnerUnregisterRequest() {
  // @@protoc_insertion_point(destructor:SceneRunner.RunnerUnregisterRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RunnerUnregisterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RunnerUnregisterRequest::ArenaDtor(void* object) {
  RunnerUnregisterRequest* _this = reinterpret_cast< RunnerUnregisterRequest* >(object);
  (void)_this;
}
void RunnerUnregisterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunnerUnregisterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunnerUnregisterRequest& RunnerUnregisterRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunnerUnregisterRequest_runnerregister_2eproto.base);
  return *internal_default_instance();
}


void RunnerUnregisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SceneRunner.RunnerUnregisterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodeid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunnerUnregisterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 nodeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RunnerUnregisterRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SceneRunner.RunnerUnregisterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nodeid = 1;
  if (this->nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_nodeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SceneRunner.RunnerUnregisterRequest)
  return target;
}

size_t RunnerUnregisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SceneRunner.RunnerUnregisterRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 nodeid = 1;
  if (this->nodeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nodeid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunnerUnregisterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SceneRunner.RunnerUnregisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RunnerUnregisterRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RunnerUnregisterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SceneRunner.RunnerUnregisterRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SceneRunner.RunnerUnregisterRequest)
    MergeFrom(*source);
  }
}

void RunnerUnregisterRequest::MergeFrom(const RunnerUnregisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SceneRunner.RunnerUnregisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nodeid() != 0) {
    _internal_set_nodeid(from._internal_nodeid());
  }
}

void RunnerUnregisterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SceneRunner.RunnerUnregisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunnerUnregisterRequest::CopyFrom(const RunnerUnregisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SceneRunner.RunnerUnregisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunnerUnregisterRequest::IsInitialized() const {
  return true;
}

void RunnerUnregisterRequest::InternalSwap(RunnerUnregisterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(nodeid_, other->nodeid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RunnerUnregisterRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RunnerUnregisterResponse::InitAsDefaultInstance() {
}
class RunnerUnregisterResponse::_Internal {
 public:
};

RunnerUnregisterResponse::RunnerUnregisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SceneRunner.RunnerUnregisterResponse)
}
RunnerUnregisterResponse::RunnerUnregisterResponse(const RunnerUnregisterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:SceneRunner.RunnerUnregisterResponse)
}

void RunnerUnregisterResponse::SharedCtor() {
  res_ = 0;
}

RunnerUnregisterResponse::~RunnerUnregisterResponse() {
  // @@protoc_insertion_point(destructor:SceneRunner.RunnerUnregisterResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RunnerUnregisterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RunnerUnregisterResponse::ArenaDtor(void* object) {
  RunnerUnregisterResponse* _this = reinterpret_cast< RunnerUnregisterResponse* >(object);
  (void)_this;
}
void RunnerUnregisterResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunnerUnregisterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunnerUnregisterResponse& RunnerUnregisterResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunnerUnregisterResponse_runnerregister_2eproto.base);
  return *internal_default_instance();
}


void RunnerUnregisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SceneRunner.RunnerUnregisterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunnerUnregisterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          res_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RunnerUnregisterResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SceneRunner.RunnerUnregisterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 res = 1;
  if (this->res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SceneRunner.RunnerUnregisterResponse)
  return target;
}

size_t RunnerUnregisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SceneRunner.RunnerUnregisterResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 res = 1;
  if (this->res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_res());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunnerUnregisterResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SceneRunner.RunnerUnregisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RunnerUnregisterResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RunnerUnregisterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SceneRunner.RunnerUnregisterResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SceneRunner.RunnerUnregisterResponse)
    MergeFrom(*source);
  }
}

void RunnerUnregisterResponse::MergeFrom(const RunnerUnregisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SceneRunner.RunnerUnregisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res() != 0) {
    _internal_set_res(from._internal_res());
  }
}

void RunnerUnregisterResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SceneRunner.RunnerUnregisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunnerUnregisterResponse::CopyFrom(const RunnerUnregisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SceneRunner.RunnerUnregisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunnerUnregisterResponse::IsInitialized() const {
  return true;
}

void RunnerUnregisterResponse::InternalSwap(RunnerUnregisterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RunnerUnregisterResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RunnerHeartbeatRequest::InitAsDefaultInstance() {
}
class RunnerHeartbeatRequest::_Internal {
 public:
};

RunnerHeartbeatRequest::RunnerHeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SceneRunner.RunnerHeartbeatRequest)
}
RunnerHeartbeatRequest::RunnerHeartbeatRequest(const RunnerHeartbeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nodeid_, &from.nodeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&nodeid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:SceneRunner.RunnerHeartbeatRequest)
}

void RunnerHeartbeatRequest::SharedCtor() {
  ::memset(&nodeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&nodeid_)) + sizeof(status_));
}

RunnerHeartbeatRequest::~RunnerHeartbeatRequest() {
  // @@protoc_insertion_point(destructor:SceneRunner.RunnerHeartbeatRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RunnerHeartbeatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RunnerHeartbeatRequest::ArenaDtor(void* object) {
  RunnerHeartbeatRequest* _this = reinterpret_cast< RunnerHeartbeatRequest* >(object);
  (void)_this;
}
void RunnerHeartbeatRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunnerHeartbeatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunnerHeartbeatRequest& RunnerHeartbeatRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunnerHeartbeatRequest_runnerregister_2eproto.base);
  return *internal_default_instance();
}


void RunnerHeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SceneRunner.RunnerHeartbeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&nodeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&nodeid_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunnerHeartbeatRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 nodeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 runningcount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          runningcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RunnerHeartbeatRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SceneRunner.RunnerHeartbeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nodeid = 1;
  if (this->nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_nodeid(), target);
  }

  // int32 runningcount = 2;
  if (this->runningcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_runningcount(), target);
  }

  // int32 status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SceneRunner.RunnerHeartbeatRequest)
  return target;
}

size_t RunnerHeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SceneRunner.RunnerHeartbeatRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 nodeid = 1;
  if (this->nodeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nodeid());
  }

  // int32 runningcount = 2;
  if (this->runningcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_runningcount());
  }

  // int32 status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunnerHeartbeatRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SceneRunner.RunnerHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RunnerHeartbeatRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RunnerHeartbeatRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SceneRunner.RunnerHeartbeatRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SceneRunner.RunnerHeartbeatRequest)
    MergeFrom(*source);
  }
}

void RunnerHeartbeatRequest::MergeFrom(const RunnerHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SceneRunner.RunnerHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nodeid() != 0) {
    _internal_set_nodeid(from._internal_nodeid());
  }
  if (from.runningcount() != 0) {
    _internal_set_runningcount(from._internal_runningcount());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void RunnerHeartbeatRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SceneRunner.RunnerHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunnerHeartbeatRequest::CopyFrom(const RunnerHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SceneRunner.RunnerHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunnerHeartbeatRequest::IsInitialized() const {
  return true;
}

void RunnerHeartbeatRequest::InternalSwap(RunnerHeartbeatRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RunnerHeartbeatRequest, status_)
      + sizeof(RunnerHeartbeatRequest::status_)
      - PROTOBUF_FIELD_OFFSET(RunnerHeartbeatRequest, nodeid_)>(
          reinterpret_cast<char*>(&nodeid_),
          reinterpret_cast<char*>(&other->nodeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RunnerHeartbeatRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RunnerHeartbeatResponse::InitAsDefaultInstance() {
}
class RunnerHeartbeatResponse::_Internal {
 public:
};

RunnerHeartbeatResponse::RunnerHeartbeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SceneRunner.RunnerHeartbeatResponse)
}
RunnerHeartbeatResponse::RunnerHeartbeatResponse(const RunnerHeartbeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:SceneRunner.RunnerHeartbeatResponse)
}

void RunnerHeartbeatResponse::SharedCtor() {
  res_ = 0;
}

RunnerHeartbeatResponse::~RunnerHeartbeatResponse() {
  // @@protoc_insertion_point(destructor:SceneRunner.RunnerHeartbeatResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RunnerHeartbeatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RunnerHeartbeatResponse::ArenaDtor(void* object) {
  RunnerHeartbeatResponse* _this = reinterpret_cast< RunnerHeartbeatResponse* >(object);
  (void)_this;
}
void RunnerHeartbeatResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunnerHeartbeatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunnerHeartbeatResponse& RunnerHeartbeatResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunnerHeartbeatResponse_runnerregister_2eproto.base);
  return *internal_default_instance();
}


void RunnerHeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SceneRunner.RunnerHeartbeatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunnerHeartbeatResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          res_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RunnerHeartbeatResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SceneRunner.RunnerHeartbeatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 res = 1;
  if (this->res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SceneRunner.RunnerHeartbeatResponse)
  return target;
}

size_t RunnerHeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SceneRunner.RunnerHeartbeatResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 res = 1;
  if (this->res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_res());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunnerHeartbeatResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SceneRunner.RunnerHeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RunnerHeartbeatResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RunnerHeartbeatResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SceneRunner.RunnerHeartbeatResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SceneRunner.RunnerHeartbeatResponse)
    MergeFrom(*source);
  }
}

void RunnerHeartbeatResponse::MergeFrom(const RunnerHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SceneRunner.RunnerHeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res() != 0) {
    _internal_set_res(from._internal_res());
  }
}

void RunnerHeartbeatResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SceneRunner.RunnerHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunnerHeartbeatResponse::CopyFrom(const RunnerHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SceneRunner.RunnerHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunnerHeartbeatResponse::IsInitialized() const {
  return true;
}

void RunnerHeartbeatResponse::InternalSwap(RunnerHeartbeatResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RunnerHeartbeatResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

RunnerRegisterService::~RunnerRegisterService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RunnerRegisterService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_runnerregister_2eproto);
  return file_level_service_descriptors_runnerregister_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RunnerRegisterService::GetDescriptor() {
  return descriptor();
}

void RunnerRegisterService::registerrunner(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::SceneRunner::RunnerRegisteRequest*,
                         ::SceneRunner::RunnerRegisteResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method registerrunner() not implemented.");
  done->Run();
}

void RunnerRegisterService::unregisterrunner(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::SceneRunner::RunnerUnregisterRequest*,
                         ::SceneRunner::RunnerUnregisterResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method unregisterrunner() not implemented.");
  done->Run();
}

void RunnerRegisterService::heartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::SceneRunner::RunnerHeartbeatRequest*,
                         ::SceneRunner::RunnerHeartbeatResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method heartbeat() not implemented.");
  done->Run();
}

void RunnerRegisterService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_runnerregister_2eproto[0]);
  switch(method->index()) {
    case 0:
      registerrunner(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::SceneRunner::RunnerRegisteRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::SceneRunner::RunnerRegisteResponse*>(
                 response),
             done);
      break;
    case 1:
      unregisterrunner(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::SceneRunner::RunnerUnregisterRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::SceneRunner::RunnerUnregisterResponse*>(
                 response),
             done);
      break;
    case 2:
      heartbeat(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::SceneRunner::RunnerHeartbeatRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::SceneRunner::RunnerHeartbeatResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RunnerRegisterService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SceneRunner::RunnerRegisteRequest::default_instance();
    case 1:
      return ::SceneRunner::RunnerUnregisterRequest::default_instance();
    case 2:
      return ::SceneRunner::RunnerHeartbeatRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RunnerRegisterService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SceneRunner::RunnerRegisteResponse::default_instance();
    case 1:
      return ::SceneRunner::RunnerUnregisterResponse::default_instance();
    case 2:
      return ::SceneRunner::RunnerHeartbeatResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RunnerRegisterService_Stub::RunnerRegisterService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RunnerRegisterService_Stub::RunnerRegisterService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
RunnerRegisterService_Stub::~RunnerRegisterService_Stub() {
  if (owns_channel_) delete channel_;
}

void RunnerRegisterService_Stub::registerrunner(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::SceneRunner::RunnerRegisteRequest* request,
                              ::SceneRunner::RunnerRegisteResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void RunnerRegisterService_Stub::unregisterrunner(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::SceneRunner::RunnerUnregisterRequest* request,
                              ::SceneRunner::RunnerUnregisterResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void RunnerRegisterService_Stub::heartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::SceneRunner::RunnerHeartbeatRequest* request,
                              ::SceneRunner::RunnerHeartbeatResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SceneRunner
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SceneRunner::RunnerRegisteRequest* Arena::CreateMaybeMessage< ::SceneRunner::RunnerRegisteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SceneRunner::RunnerRegisteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SceneRunner::RunnerRegisteResponse* Arena::CreateMaybeMessage< ::SceneRunner::RunnerRegisteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SceneRunner::RunnerRegisteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SceneRunner::RunnerUnregisterRequest* Arena::CreateMaybeMessage< ::SceneRunner::RunnerUnregisterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SceneRunner::RunnerUnregisterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SceneRunner::RunnerUnregisterResponse* Arena::CreateMaybeMessage< ::SceneRunner::RunnerUnregisterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SceneRunner::RunnerUnregisterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SceneRunner::RunnerHeartbeatRequest* Arena::CreateMaybeMessage< ::SceneRunner::RunnerHeartbeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SceneRunner::RunnerHeartbeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SceneRunner::RunnerHeartbeatResponse* Arena::CreateMaybeMessage< ::SceneRunner::RunnerHeartbeatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SceneRunner::RunnerHeartbeatResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
