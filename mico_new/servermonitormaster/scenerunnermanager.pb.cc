// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenerunnermanager.proto

#include "scenerunnermanager.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace SceneRunner {
class IsSceneRunningRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsSceneRunningRequest> _instance;
} _IsSceneRunningRequest_default_instance_;
class IsSceneRunningResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsSceneRunningResponse> _instance;
} _IsSceneRunningResponse_default_instance_;
class StartRunningRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartRunningRequest> _instance;
} _StartRunningRequest_default_instance_;
class StartRunningResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartRunningResponse> _instance;
} _StartRunningResponse_default_instance_;
class StopRunningRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopRunningRequest> _instance;
} _StopRunningRequest_default_instance_;
class StopRunningReponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopRunningReponse> _instance;
} _StopRunningReponse_default_instance_;
}  // namespace SceneRunner
static void InitDefaultsscc_info_IsSceneRunningRequest_scenerunnermanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SceneRunner::_IsSceneRunningRequest_default_instance_;
    new (ptr) ::SceneRunner::IsSceneRunningRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SceneRunner::IsSceneRunningRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsSceneRunningRequest_scenerunnermanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsSceneRunningRequest_scenerunnermanager_2eproto}, {}};

static void InitDefaultsscc_info_IsSceneRunningResponse_scenerunnermanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SceneRunner::_IsSceneRunningResponse_default_instance_;
    new (ptr) ::SceneRunner::IsSceneRunningResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SceneRunner::IsSceneRunningResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsSceneRunningResponse_scenerunnermanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsSceneRunningResponse_scenerunnermanager_2eproto}, {}};

static void InitDefaultsscc_info_StartRunningRequest_scenerunnermanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SceneRunner::_StartRunningRequest_default_instance_;
    new (ptr) ::SceneRunner::StartRunningRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SceneRunner::StartRunningRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartRunningRequest_scenerunnermanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartRunningRequest_scenerunnermanager_2eproto}, {}};

static void InitDefaultsscc_info_StartRunningResponse_scenerunnermanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SceneRunner::_StartRunningResponse_default_instance_;
    new (ptr) ::SceneRunner::StartRunningResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SceneRunner::StartRunningResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartRunningResponse_scenerunnermanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartRunningResponse_scenerunnermanager_2eproto}, {}};

static void InitDefaultsscc_info_StopRunningReponse_scenerunnermanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SceneRunner::_StopRunningReponse_default_instance_;
    new (ptr) ::SceneRunner::StopRunningReponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SceneRunner::StopRunningReponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopRunningReponse_scenerunnermanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopRunningReponse_scenerunnermanager_2eproto}, {}};

static void InitDefaultsscc_info_StopRunningRequest_scenerunnermanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SceneRunner::_StopRunningRequest_default_instance_;
    new (ptr) ::SceneRunner::StopRunningRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SceneRunner::StopRunningRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopRunningRequest_scenerunnermanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopRunningRequest_scenerunnermanager_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scenerunnermanager_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_scenerunnermanager_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_scenerunnermanager_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scenerunnermanager_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::IsSceneRunningRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::IsSceneRunningRequest, sceneid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::IsSceneRunningResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::IsSceneRunningResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::StartRunningRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::StartRunningRequest, sceneid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::StartRunningResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::StartRunningResponse, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::StopRunningRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::StopRunningRequest, sceneid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::StopRunningReponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SceneRunner::StopRunningReponse, res_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SceneRunner::IsSceneRunningRequest)},
  { 6, -1, sizeof(::SceneRunner::IsSceneRunningResponse)},
  { 12, -1, sizeof(::SceneRunner::StartRunningRequest)},
  { 18, -1, sizeof(::SceneRunner::StartRunningResponse)},
  { 24, -1, sizeof(::SceneRunner::StopRunningRequest)},
  { 30, -1, sizeof(::SceneRunner::StopRunningReponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SceneRunner::_IsSceneRunningRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SceneRunner::_IsSceneRunningResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SceneRunner::_StartRunningRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SceneRunner::_StartRunningResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SceneRunner::_StopRunningRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SceneRunner::_StopRunningReponse_default_instance_),
};

const char descriptor_table_protodef_scenerunnermanager_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030scenerunnermanager.proto\022\013SceneRunner\""
  "(\n\025IsSceneRunningRequest\022\017\n\007sceneid\030\001 \001("
  "\004\"(\n\026IsSceneRunningResponse\022\016\n\006status\030\001 "
  "\001(\r\"&\n\023StartRunningRequest\022\017\n\007sceneid\030\001 "
  "\001(\004\"#\n\024StartRunningResponse\022\013\n\003res\030\001 \001(\004"
  "\"%\n\022StopRunningRequest\022\017\n\007sceneid\030\001 \001(\004\""
  "!\n\022StopRunningReponse\022\013\n\003res\030\001 \001(\0042\224\002\n\025I"
  "sSceneRunningService\022U\n\nisSceneRun\022\".Sce"
  "neRunner.IsSceneRunningRequest\032#.SceneRu"
  "nner.IsSceneRunningResponse\022S\n\014startRunn"
  "ing\022 .SceneRunner.StartRunningRequest\032!."
  "SceneRunner.StartRunningResponse\022O\n\013stop"
  "Running\022\037.SceneRunner.StopRunningRequest"
  "\032\037.SceneRunner.StopRunningReponseB\003\200\001\001b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scenerunnermanager_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scenerunnermanager_2eproto_sccs[6] = {
  &scc_info_IsSceneRunningRequest_scenerunnermanager_2eproto.base,
  &scc_info_IsSceneRunningResponse_scenerunnermanager_2eproto.base,
  &scc_info_StartRunningRequest_scenerunnermanager_2eproto.base,
  &scc_info_StartRunningResponse_scenerunnermanager_2eproto.base,
  &scc_info_StopRunningReponse_scenerunnermanager_2eproto.base,
  &scc_info_StopRunningRequest_scenerunnermanager_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scenerunnermanager_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenerunnermanager_2eproto = {
  false, false, descriptor_table_protodef_scenerunnermanager_2eproto, "scenerunnermanager.proto", 566,
  &descriptor_table_scenerunnermanager_2eproto_once, descriptor_table_scenerunnermanager_2eproto_sccs, descriptor_table_scenerunnermanager_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_scenerunnermanager_2eproto::offsets,
  file_level_metadata_scenerunnermanager_2eproto, 6, file_level_enum_descriptors_scenerunnermanager_2eproto, file_level_service_descriptors_scenerunnermanager_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scenerunnermanager_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scenerunnermanager_2eproto)), true);
namespace SceneRunner {

// ===================================================================

void IsSceneRunningRequest::InitAsDefaultInstance() {
}
class IsSceneRunningRequest::_Internal {
 public:
};

IsSceneRunningRequest::IsSceneRunningRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SceneRunner.IsSceneRunningRequest)
}
IsSceneRunningRequest::IsSceneRunningRequest(const IsSceneRunningRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sceneid_ = from.sceneid_;
  // @@protoc_insertion_point(copy_constructor:SceneRunner.IsSceneRunningRequest)
}

void IsSceneRunningRequest::SharedCtor() {
  sceneid_ = PROTOBUF_ULONGLONG(0);
}

IsSceneRunningRequest::~IsSceneRunningRequest() {
  // @@protoc_insertion_point(destructor:SceneRunner.IsSceneRunningRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IsSceneRunningRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IsSceneRunningRequest::ArenaDtor(void* object) {
  IsSceneRunningRequest* _this = reinterpret_cast< IsSceneRunningRequest* >(object);
  (void)_this;
}
void IsSceneRunningRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsSceneRunningRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsSceneRunningRequest& IsSceneRunningRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsSceneRunningRequest_scenerunnermanager_2eproto.base);
  return *internal_default_instance();
}


void IsSceneRunningRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SceneRunner.IsSceneRunningRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sceneid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsSceneRunningRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 sceneid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsSceneRunningRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SceneRunner.IsSceneRunningRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sceneid = 1;
  if (this->sceneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sceneid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SceneRunner.IsSceneRunningRequest)
  return target;
}

size_t IsSceneRunningRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SceneRunner.IsSceneRunningRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sceneid = 1;
  if (this->sceneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sceneid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsSceneRunningRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SceneRunner.IsSceneRunningRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IsSceneRunningRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsSceneRunningRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SceneRunner.IsSceneRunningRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SceneRunner.IsSceneRunningRequest)
    MergeFrom(*source);
  }
}

void IsSceneRunningRequest::MergeFrom(const IsSceneRunningRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SceneRunner.IsSceneRunningRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sceneid() != 0) {
    _internal_set_sceneid(from._internal_sceneid());
  }
}

void IsSceneRunningRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SceneRunner.IsSceneRunningRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsSceneRunningRequest::CopyFrom(const IsSceneRunningRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SceneRunner.IsSceneRunningRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsSceneRunningRequest::IsInitialized() const {
  return true;
}

void IsSceneRunningRequest::InternalSwap(IsSceneRunningRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(sceneid_, other->sceneid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsSceneRunningRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsSceneRunningResponse::InitAsDefaultInstance() {
}
class IsSceneRunningResponse::_Internal {
 public:
};

IsSceneRunningResponse::IsSceneRunningResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SceneRunner.IsSceneRunningResponse)
}
IsSceneRunningResponse::IsSceneRunningResponse(const IsSceneRunningResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:SceneRunner.IsSceneRunningResponse)
}

void IsSceneRunningResponse::SharedCtor() {
  status_ = 0u;
}

IsSceneRunningResponse::~IsSceneRunningResponse() {
  // @@protoc_insertion_point(destructor:SceneRunner.IsSceneRunningResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IsSceneRunningResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IsSceneRunningResponse::ArenaDtor(void* object) {
  IsSceneRunningResponse* _this = reinterpret_cast< IsSceneRunningResponse* >(object);
  (void)_this;
}
void IsSceneRunningResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsSceneRunningResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsSceneRunningResponse& IsSceneRunningResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsSceneRunningResponse_scenerunnermanager_2eproto.base);
  return *internal_default_instance();
}


void IsSceneRunningResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SceneRunner.IsSceneRunningResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsSceneRunningResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsSceneRunningResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SceneRunner.IsSceneRunningResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SceneRunner.IsSceneRunningResponse)
  return target;
}

size_t IsSceneRunningResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SceneRunner.IsSceneRunningResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsSceneRunningResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SceneRunner.IsSceneRunningResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IsSceneRunningResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsSceneRunningResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SceneRunner.IsSceneRunningResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SceneRunner.IsSceneRunningResponse)
    MergeFrom(*source);
  }
}

void IsSceneRunningResponse::MergeFrom(const IsSceneRunningResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SceneRunner.IsSceneRunningResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void IsSceneRunningResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SceneRunner.IsSceneRunningResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsSceneRunningResponse::CopyFrom(const IsSceneRunningResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SceneRunner.IsSceneRunningResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsSceneRunningResponse::IsInitialized() const {
  return true;
}

void IsSceneRunningResponse::InternalSwap(IsSceneRunningResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsSceneRunningResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartRunningRequest::InitAsDefaultInstance() {
}
class StartRunningRequest::_Internal {
 public:
};

StartRunningRequest::StartRunningRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SceneRunner.StartRunningRequest)
}
StartRunningRequest::StartRunningRequest(const StartRunningRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sceneid_ = from.sceneid_;
  // @@protoc_insertion_point(copy_constructor:SceneRunner.StartRunningRequest)
}

void StartRunningRequest::SharedCtor() {
  sceneid_ = PROTOBUF_ULONGLONG(0);
}

StartRunningRequest::~StartRunningRequest() {
  // @@protoc_insertion_point(destructor:SceneRunner.StartRunningRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartRunningRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StartRunningRequest::ArenaDtor(void* object) {
  StartRunningRequest* _this = reinterpret_cast< StartRunningRequest* >(object);
  (void)_this;
}
void StartRunningRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartRunningRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartRunningRequest& StartRunningRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartRunningRequest_scenerunnermanager_2eproto.base);
  return *internal_default_instance();
}


void StartRunningRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SceneRunner.StartRunningRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sceneid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartRunningRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 sceneid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartRunningRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SceneRunner.StartRunningRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sceneid = 1;
  if (this->sceneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sceneid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SceneRunner.StartRunningRequest)
  return target;
}

size_t StartRunningRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SceneRunner.StartRunningRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sceneid = 1;
  if (this->sceneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sceneid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartRunningRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SceneRunner.StartRunningRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartRunningRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartRunningRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SceneRunner.StartRunningRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SceneRunner.StartRunningRequest)
    MergeFrom(*source);
  }
}

void StartRunningRequest::MergeFrom(const StartRunningRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SceneRunner.StartRunningRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sceneid() != 0) {
    _internal_set_sceneid(from._internal_sceneid());
  }
}

void StartRunningRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SceneRunner.StartRunningRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartRunningRequest::CopyFrom(const StartRunningRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SceneRunner.StartRunningRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRunningRequest::IsInitialized() const {
  return true;
}

void StartRunningRequest::InternalSwap(StartRunningRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(sceneid_, other->sceneid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartRunningRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartRunningResponse::InitAsDefaultInstance() {
}
class StartRunningResponse::_Internal {
 public:
};

StartRunningResponse::StartRunningResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SceneRunner.StartRunningResponse)
}
StartRunningResponse::StartRunningResponse(const StartRunningResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:SceneRunner.StartRunningResponse)
}

void StartRunningResponse::SharedCtor() {
  res_ = PROTOBUF_ULONGLONG(0);
}

StartRunningResponse::~StartRunningResponse() {
  // @@protoc_insertion_point(destructor:SceneRunner.StartRunningResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartRunningResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StartRunningResponse::ArenaDtor(void* object) {
  StartRunningResponse* _this = reinterpret_cast< StartRunningResponse* >(object);
  (void)_this;
}
void StartRunningResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartRunningResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartRunningResponse& StartRunningResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartRunningResponse_scenerunnermanager_2eproto.base);
  return *internal_default_instance();
}


void StartRunningResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SceneRunner.StartRunningResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartRunningResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          res_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartRunningResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SceneRunner.StartRunningResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 res = 1;
  if (this->res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SceneRunner.StartRunningResponse)
  return target;
}

size_t StartRunningResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SceneRunner.StartRunningResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 res = 1;
  if (this->res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_res());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartRunningResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SceneRunner.StartRunningResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StartRunningResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartRunningResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SceneRunner.StartRunningResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SceneRunner.StartRunningResponse)
    MergeFrom(*source);
  }
}

void StartRunningResponse::MergeFrom(const StartRunningResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SceneRunner.StartRunningResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res() != 0) {
    _internal_set_res(from._internal_res());
  }
}

void StartRunningResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SceneRunner.StartRunningResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartRunningResponse::CopyFrom(const StartRunningResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SceneRunner.StartRunningResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRunningResponse::IsInitialized() const {
  return true;
}

void StartRunningResponse::InternalSwap(StartRunningResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartRunningResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopRunningRequest::InitAsDefaultInstance() {
}
class StopRunningRequest::_Internal {
 public:
};

StopRunningRequest::StopRunningRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SceneRunner.StopRunningRequest)
}
StopRunningRequest::StopRunningRequest(const StopRunningRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sceneid_ = from.sceneid_;
  // @@protoc_insertion_point(copy_constructor:SceneRunner.StopRunningRequest)
}

void StopRunningRequest::SharedCtor() {
  sceneid_ = PROTOBUF_ULONGLONG(0);
}

StopRunningRequest::~StopRunningRequest() {
  // @@protoc_insertion_point(destructor:SceneRunner.StopRunningRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopRunningRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StopRunningRequest::ArenaDtor(void* object) {
  StopRunningRequest* _this = reinterpret_cast< StopRunningRequest* >(object);
  (void)_this;
}
void StopRunningRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopRunningRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopRunningRequest& StopRunningRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopRunningRequest_scenerunnermanager_2eproto.base);
  return *internal_default_instance();
}


void StopRunningRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SceneRunner.StopRunningRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sceneid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopRunningRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 sceneid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopRunningRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SceneRunner.StopRunningRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sceneid = 1;
  if (this->sceneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sceneid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SceneRunner.StopRunningRequest)
  return target;
}

size_t StopRunningRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SceneRunner.StopRunningRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sceneid = 1;
  if (this->sceneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sceneid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopRunningRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SceneRunner.StopRunningRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopRunningRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopRunningRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SceneRunner.StopRunningRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SceneRunner.StopRunningRequest)
    MergeFrom(*source);
  }
}

void StopRunningRequest::MergeFrom(const StopRunningRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SceneRunner.StopRunningRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sceneid() != 0) {
    _internal_set_sceneid(from._internal_sceneid());
  }
}

void StopRunningRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SceneRunner.StopRunningRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopRunningRequest::CopyFrom(const StopRunningRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SceneRunner.StopRunningRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopRunningRequest::IsInitialized() const {
  return true;
}

void StopRunningRequest::InternalSwap(StopRunningRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(sceneid_, other->sceneid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopRunningRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopRunningReponse::InitAsDefaultInstance() {
}
class StopRunningReponse::_Internal {
 public:
};

StopRunningReponse::StopRunningReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SceneRunner.StopRunningReponse)
}
StopRunningReponse::StopRunningReponse(const StopRunningReponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:SceneRunner.StopRunningReponse)
}

void StopRunningReponse::SharedCtor() {
  res_ = PROTOBUF_ULONGLONG(0);
}

StopRunningReponse::~StopRunningReponse() {
  // @@protoc_insertion_point(destructor:SceneRunner.StopRunningReponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopRunningReponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StopRunningReponse::ArenaDtor(void* object) {
  StopRunningReponse* _this = reinterpret_cast< StopRunningReponse* >(object);
  (void)_this;
}
void StopRunningReponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopRunningReponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopRunningReponse& StopRunningReponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopRunningReponse_scenerunnermanager_2eproto.base);
  return *internal_default_instance();
}


void StopRunningReponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SceneRunner.StopRunningReponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopRunningReponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          res_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopRunningReponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SceneRunner.StopRunningReponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 res = 1;
  if (this->res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SceneRunner.StopRunningReponse)
  return target;
}

size_t StopRunningReponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SceneRunner.StopRunningReponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 res = 1;
  if (this->res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_res());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopRunningReponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SceneRunner.StopRunningReponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StopRunningReponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopRunningReponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SceneRunner.StopRunningReponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SceneRunner.StopRunningReponse)
    MergeFrom(*source);
  }
}

void StopRunningReponse::MergeFrom(const StopRunningReponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SceneRunner.StopRunningReponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res() != 0) {
    _internal_set_res(from._internal_res());
  }
}

void StopRunningReponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SceneRunner.StopRunningReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopRunningReponse::CopyFrom(const StopRunningReponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SceneRunner.StopRunningReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopRunningReponse::IsInitialized() const {
  return true;
}

void StopRunningReponse::InternalSwap(StopRunningReponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopRunningReponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

IsSceneRunningService::~IsSceneRunningService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* IsSceneRunningService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenerunnermanager_2eproto);
  return file_level_service_descriptors_scenerunnermanager_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* IsSceneRunningService::GetDescriptor() {
  return descriptor();
}

void IsSceneRunningService::isSceneRun(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::SceneRunner::IsSceneRunningRequest*,
                         ::SceneRunner::IsSceneRunningResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method isSceneRun() not implemented.");
  done->Run();
}

void IsSceneRunningService::startRunning(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::SceneRunner::StartRunningRequest*,
                         ::SceneRunner::StartRunningResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method startRunning() not implemented.");
  done->Run();
}

void IsSceneRunningService::stopRunning(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::SceneRunner::StopRunningRequest*,
                         ::SceneRunner::StopRunningReponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method stopRunning() not implemented.");
  done->Run();
}

void IsSceneRunningService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_scenerunnermanager_2eproto[0]);
  switch(method->index()) {
    case 0:
      isSceneRun(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::SceneRunner::IsSceneRunningRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::SceneRunner::IsSceneRunningResponse*>(
                 response),
             done);
      break;
    case 1:
      startRunning(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::SceneRunner::StartRunningRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::SceneRunner::StartRunningResponse*>(
                 response),
             done);
      break;
    case 2:
      stopRunning(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::SceneRunner::StopRunningRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::SceneRunner::StopRunningReponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& IsSceneRunningService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SceneRunner::IsSceneRunningRequest::default_instance();
    case 1:
      return ::SceneRunner::StartRunningRequest::default_instance();
    case 2:
      return ::SceneRunner::StopRunningRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& IsSceneRunningService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SceneRunner::IsSceneRunningResponse::default_instance();
    case 1:
      return ::SceneRunner::StartRunningResponse::default_instance();
    case 2:
      return ::SceneRunner::StopRunningReponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

IsSceneRunningService_Stub::IsSceneRunningService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
IsSceneRunningService_Stub::IsSceneRunningService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
IsSceneRunningService_Stub::~IsSceneRunningService_Stub() {
  if (owns_channel_) delete channel_;
}

void IsSceneRunningService_Stub::isSceneRun(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::SceneRunner::IsSceneRunningRequest* request,
                              ::SceneRunner::IsSceneRunningResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void IsSceneRunningService_Stub::startRunning(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::SceneRunner::StartRunningRequest* request,
                              ::SceneRunner::StartRunningResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void IsSceneRunningService_Stub::stopRunning(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::SceneRunner::StopRunningRequest* request,
                              ::SceneRunner::StopRunningReponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SceneRunner
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SceneRunner::IsSceneRunningRequest* Arena::CreateMaybeMessage< ::SceneRunner::IsSceneRunningRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SceneRunner::IsSceneRunningRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SceneRunner::IsSceneRunningResponse* Arena::CreateMaybeMessage< ::SceneRunner::IsSceneRunningResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SceneRunner::IsSceneRunningResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SceneRunner::StartRunningRequest* Arena::CreateMaybeMessage< ::SceneRunner::StartRunningRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SceneRunner::StartRunningRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SceneRunner::StartRunningResponse* Arena::CreateMaybeMessage< ::SceneRunner::StartRunningResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SceneRunner::StartRunningResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SceneRunner::StopRunningRequest* Arena::CreateMaybeMessage< ::SceneRunner::StopRunningRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SceneRunner::StopRunningRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SceneRunner::StopRunningReponse* Arena::CreateMaybeMessage< ::SceneRunner::StopRunningReponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SceneRunner::StopRunningReponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
