// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: runnerregister.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_runnerregister_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_runnerregister_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_runnerregister_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_runnerregister_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_runnerregister_2eproto;
namespace SceneRunner {
class RunnerHeartbeatRequest;
class RunnerHeartbeatRequestDefaultTypeInternal;
extern RunnerHeartbeatRequestDefaultTypeInternal _RunnerHeartbeatRequest_default_instance_;
class RunnerHeartbeatResponse;
class RunnerHeartbeatResponseDefaultTypeInternal;
extern RunnerHeartbeatResponseDefaultTypeInternal _RunnerHeartbeatResponse_default_instance_;
class RunnerRegisteRequest;
class RunnerRegisteRequestDefaultTypeInternal;
extern RunnerRegisteRequestDefaultTypeInternal _RunnerRegisteRequest_default_instance_;
class RunnerRegisteResponse;
class RunnerRegisteResponseDefaultTypeInternal;
extern RunnerRegisteResponseDefaultTypeInternal _RunnerRegisteResponse_default_instance_;
class RunnerUnregisterRequest;
class RunnerUnregisterRequestDefaultTypeInternal;
extern RunnerUnregisterRequestDefaultTypeInternal _RunnerUnregisterRequest_default_instance_;
class RunnerUnregisterResponse;
class RunnerUnregisterResponseDefaultTypeInternal;
extern RunnerUnregisterResponseDefaultTypeInternal _RunnerUnregisterResponse_default_instance_;
}  // namespace SceneRunner
PROTOBUF_NAMESPACE_OPEN
template<> ::SceneRunner::RunnerHeartbeatRequest* Arena::CreateMaybeMessage<::SceneRunner::RunnerHeartbeatRequest>(Arena*);
template<> ::SceneRunner::RunnerHeartbeatResponse* Arena::CreateMaybeMessage<::SceneRunner::RunnerHeartbeatResponse>(Arena*);
template<> ::SceneRunner::RunnerRegisteRequest* Arena::CreateMaybeMessage<::SceneRunner::RunnerRegisteRequest>(Arena*);
template<> ::SceneRunner::RunnerRegisteResponse* Arena::CreateMaybeMessage<::SceneRunner::RunnerRegisteResponse>(Arena*);
template<> ::SceneRunner::RunnerUnregisterRequest* Arena::CreateMaybeMessage<::SceneRunner::RunnerUnregisterRequest>(Arena*);
template<> ::SceneRunner::RunnerUnregisterResponse* Arena::CreateMaybeMessage<::SceneRunner::RunnerUnregisterResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SceneRunner {

// ===================================================================

class RunnerRegisteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SceneRunner.RunnerRegisteRequest) */ {
 public:
  inline RunnerRegisteRequest() : RunnerRegisteRequest(nullptr) {}
  virtual ~RunnerRegisteRequest();

  RunnerRegisteRequest(const RunnerRegisteRequest& from);
  RunnerRegisteRequest(RunnerRegisteRequest&& from) noexcept
    : RunnerRegisteRequest() {
    *this = ::std::move(from);
  }

  inline RunnerRegisteRequest& operator=(const RunnerRegisteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunnerRegisteRequest& operator=(RunnerRegisteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RunnerRegisteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunnerRegisteRequest* internal_default_instance() {
    return reinterpret_cast<const RunnerRegisteRequest*>(
               &_RunnerRegisteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RunnerRegisteRequest& a, RunnerRegisteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RunnerRegisteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunnerRegisteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RunnerRegisteRequest* New() const final {
    return CreateMaybeMessage<RunnerRegisteRequest>(nullptr);
  }

  RunnerRegisteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunnerRegisteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RunnerRegisteRequest& from);
  void MergeFrom(const RunnerRegisteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunnerRegisteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SceneRunner.RunnerRegisteRequest";
  }
  protected:
  explicit RunnerRegisteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runnerregister_2eproto);
    return ::descriptor_table_runnerregister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 2,
    kNodeidFieldNumber = 1,
    kPortFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 nodeid = 1;
  void clear_nodeid();
  ::PROTOBUF_NAMESPACE_ID::int32 nodeid() const;
  void set_nodeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nodeid() const;
  void _internal_set_nodeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 4;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SceneRunner.RunnerRegisteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 nodeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runnerregister_2eproto;
};
// -------------------------------------------------------------------

class RunnerRegisteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SceneRunner.RunnerRegisteResponse) */ {
 public:
  inline RunnerRegisteResponse() : RunnerRegisteResponse(nullptr) {}
  virtual ~RunnerRegisteResponse();

  RunnerRegisteResponse(const RunnerRegisteResponse& from);
  RunnerRegisteResponse(RunnerRegisteResponse&& from) noexcept
    : RunnerRegisteResponse() {
    *this = ::std::move(from);
  }

  inline RunnerRegisteResponse& operator=(const RunnerRegisteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunnerRegisteResponse& operator=(RunnerRegisteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RunnerRegisteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunnerRegisteResponse* internal_default_instance() {
    return reinterpret_cast<const RunnerRegisteResponse*>(
               &_RunnerRegisteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RunnerRegisteResponse& a, RunnerRegisteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RunnerRegisteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunnerRegisteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RunnerRegisteResponse* New() const final {
    return CreateMaybeMessage<RunnerRegisteResponse>(nullptr);
  }

  RunnerRegisteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunnerRegisteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RunnerRegisteResponse& from);
  void MergeFrom(const RunnerRegisteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunnerRegisteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SceneRunner.RunnerRegisteResponse";
  }
  protected:
  explicit RunnerRegisteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runnerregister_2eproto);
    return ::descriptor_table_runnerregister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
  };
  // uint32 res = 1;
  void clear_res();
  ::PROTOBUF_NAMESPACE_ID::uint32 res() const;
  void set_res(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_res() const;
  void _internal_set_res(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SceneRunner.RunnerRegisteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runnerregister_2eproto;
};
// -------------------------------------------------------------------

class RunnerUnregisterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SceneRunner.RunnerUnregisterRequest) */ {
 public:
  inline RunnerUnregisterRequest() : RunnerUnregisterRequest(nullptr) {}
  virtual ~RunnerUnregisterRequest();

  RunnerUnregisterRequest(const RunnerUnregisterRequest& from);
  RunnerUnregisterRequest(RunnerUnregisterRequest&& from) noexcept
    : RunnerUnregisterRequest() {
    *this = ::std::move(from);
  }

  inline RunnerUnregisterRequest& operator=(const RunnerUnregisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunnerUnregisterRequest& operator=(RunnerUnregisterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RunnerUnregisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunnerUnregisterRequest* internal_default_instance() {
    return reinterpret_cast<const RunnerUnregisterRequest*>(
               &_RunnerUnregisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RunnerUnregisterRequest& a, RunnerUnregisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RunnerUnregisterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunnerUnregisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RunnerUnregisterRequest* New() const final {
    return CreateMaybeMessage<RunnerUnregisterRequest>(nullptr);
  }

  RunnerUnregisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunnerUnregisterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RunnerUnregisterRequest& from);
  void MergeFrom(const RunnerUnregisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunnerUnregisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SceneRunner.RunnerUnregisterRequest";
  }
  protected:
  explicit RunnerUnregisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runnerregister_2eproto);
    return ::descriptor_table_runnerregister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeidFieldNumber = 1,
  };
  // int32 nodeid = 1;
  void clear_nodeid();
  ::PROTOBUF_NAMESPACE_ID::int32 nodeid() const;
  void set_nodeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nodeid() const;
  void _internal_set_nodeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SceneRunner.RunnerUnregisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 nodeid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runnerregister_2eproto;
};
// -------------------------------------------------------------------

class RunnerUnregisterResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SceneRunner.RunnerUnregisterResponse) */ {
 public:
  inline RunnerUnregisterResponse() : RunnerUnregisterResponse(nullptr) {}
  virtual ~RunnerUnregisterResponse();

  RunnerUnregisterResponse(const RunnerUnregisterResponse& from);
  RunnerUnregisterResponse(RunnerUnregisterResponse&& from) noexcept
    : RunnerUnregisterResponse() {
    *this = ::std::move(from);
  }

  inline RunnerUnregisterResponse& operator=(const RunnerUnregisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunnerUnregisterResponse& operator=(RunnerUnregisterResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RunnerUnregisterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunnerUnregisterResponse* internal_default_instance() {
    return reinterpret_cast<const RunnerUnregisterResponse*>(
               &_RunnerUnregisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RunnerUnregisterResponse& a, RunnerUnregisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RunnerUnregisterResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunnerUnregisterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RunnerUnregisterResponse* New() const final {
    return CreateMaybeMessage<RunnerUnregisterResponse>(nullptr);
  }

  RunnerUnregisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunnerUnregisterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RunnerUnregisterResponse& from);
  void MergeFrom(const RunnerUnregisterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunnerUnregisterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SceneRunner.RunnerUnregisterResponse";
  }
  protected:
  explicit RunnerUnregisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runnerregister_2eproto);
    return ::descriptor_table_runnerregister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
  };
  // int32 res = 1;
  void clear_res();
  ::PROTOBUF_NAMESPACE_ID::int32 res() const;
  void set_res(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_res() const;
  void _internal_set_res(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SceneRunner.RunnerUnregisterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runnerregister_2eproto;
};
// -------------------------------------------------------------------

class RunnerHeartbeatRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SceneRunner.RunnerHeartbeatRequest) */ {
 public:
  inline RunnerHeartbeatRequest() : RunnerHeartbeatRequest(nullptr) {}
  virtual ~RunnerHeartbeatRequest();

  RunnerHeartbeatRequest(const RunnerHeartbeatRequest& from);
  RunnerHeartbeatRequest(RunnerHeartbeatRequest&& from) noexcept
    : RunnerHeartbeatRequest() {
    *this = ::std::move(from);
  }

  inline RunnerHeartbeatRequest& operator=(const RunnerHeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunnerHeartbeatRequest& operator=(RunnerHeartbeatRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RunnerHeartbeatRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunnerHeartbeatRequest* internal_default_instance() {
    return reinterpret_cast<const RunnerHeartbeatRequest*>(
               &_RunnerHeartbeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RunnerHeartbeatRequest& a, RunnerHeartbeatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RunnerHeartbeatRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunnerHeartbeatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RunnerHeartbeatRequest* New() const final {
    return CreateMaybeMessage<RunnerHeartbeatRequest>(nullptr);
  }

  RunnerHeartbeatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunnerHeartbeatRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RunnerHeartbeatRequest& from);
  void MergeFrom(const RunnerHeartbeatRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunnerHeartbeatRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SceneRunner.RunnerHeartbeatRequest";
  }
  protected:
  explicit RunnerHeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runnerregister_2eproto);
    return ::descriptor_table_runnerregister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeidFieldNumber = 1,
    kRunningcountFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // int32 nodeid = 1;
  void clear_nodeid();
  ::PROTOBUF_NAMESPACE_ID::int32 nodeid() const;
  void set_nodeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nodeid() const;
  void _internal_set_nodeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 runningcount = 2;
  void clear_runningcount();
  ::PROTOBUF_NAMESPACE_ID::int32 runningcount() const;
  void set_runningcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_runningcount() const;
  void _internal_set_runningcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 3;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SceneRunner.RunnerHeartbeatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 nodeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 runningcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runnerregister_2eproto;
};
// -------------------------------------------------------------------

class RunnerHeartbeatResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SceneRunner.RunnerHeartbeatResponse) */ {
 public:
  inline RunnerHeartbeatResponse() : RunnerHeartbeatResponse(nullptr) {}
  virtual ~RunnerHeartbeatResponse();

  RunnerHeartbeatResponse(const RunnerHeartbeatResponse& from);
  RunnerHeartbeatResponse(RunnerHeartbeatResponse&& from) noexcept
    : RunnerHeartbeatResponse() {
    *this = ::std::move(from);
  }

  inline RunnerHeartbeatResponse& operator=(const RunnerHeartbeatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunnerHeartbeatResponse& operator=(RunnerHeartbeatResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RunnerHeartbeatResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunnerHeartbeatResponse* internal_default_instance() {
    return reinterpret_cast<const RunnerHeartbeatResponse*>(
               &_RunnerHeartbeatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RunnerHeartbeatResponse& a, RunnerHeartbeatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RunnerHeartbeatResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunnerHeartbeatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RunnerHeartbeatResponse* New() const final {
    return CreateMaybeMessage<RunnerHeartbeatResponse>(nullptr);
  }

  RunnerHeartbeatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunnerHeartbeatResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RunnerHeartbeatResponse& from);
  void MergeFrom(const RunnerHeartbeatResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunnerHeartbeatResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SceneRunner.RunnerHeartbeatResponse";
  }
  protected:
  explicit RunnerHeartbeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runnerregister_2eproto);
    return ::descriptor_table_runnerregister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
  };
  // int32 res = 1;
  void clear_res();
  ::PROTOBUF_NAMESPACE_ID::int32 res() const;
  void set_res(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_res() const;
  void _internal_set_res(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SceneRunner.RunnerHeartbeatResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runnerregister_2eproto;
};
// ===================================================================

class RunnerRegisterService_Stub;

class RunnerRegisterService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RunnerRegisterService() {};
 public:
  virtual ~RunnerRegisterService();

  typedef RunnerRegisterService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void registerrunner(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SceneRunner::RunnerRegisteRequest* request,
                       ::SceneRunner::RunnerRegisteResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void unregisterrunner(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SceneRunner::RunnerUnregisterRequest* request,
                       ::SceneRunner::RunnerUnregisterResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void heartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SceneRunner::RunnerHeartbeatRequest* request,
                       ::SceneRunner::RunnerHeartbeatResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RunnerRegisterService);
};

class RunnerRegisterService_Stub : public RunnerRegisterService {
 public:
  RunnerRegisterService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  RunnerRegisterService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~RunnerRegisterService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements RunnerRegisterService ------------------------------------------

  void registerrunner(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SceneRunner::RunnerRegisteRequest* request,
                       ::SceneRunner::RunnerRegisteResponse* response,
                       ::google::protobuf::Closure* done);
  void unregisterrunner(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SceneRunner::RunnerUnregisterRequest* request,
                       ::SceneRunner::RunnerUnregisterResponse* response,
                       ::google::protobuf::Closure* done);
  void heartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SceneRunner::RunnerHeartbeatRequest* request,
                       ::SceneRunner::RunnerHeartbeatResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RunnerRegisterService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RunnerRegisteRequest

// int32 nodeid = 1;
inline void RunnerRegisteRequest::clear_nodeid() {
  nodeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunnerRegisteRequest::_internal_nodeid() const {
  return nodeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunnerRegisteRequest::nodeid() const {
  // @@protoc_insertion_point(field_get:SceneRunner.RunnerRegisteRequest.nodeid)
  return _internal_nodeid();
}
inline void RunnerRegisteRequest::_internal_set_nodeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nodeid_ = value;
}
inline void RunnerRegisteRequest::set_nodeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nodeid(value);
  // @@protoc_insertion_point(field_set:SceneRunner.RunnerRegisteRequest.nodeid)
}

// string ip = 2;
inline void RunnerRegisteRequest::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RunnerRegisteRequest::ip() const {
  // @@protoc_insertion_point(field_get:SceneRunner.RunnerRegisteRequest.ip)
  return _internal_ip();
}
inline void RunnerRegisteRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:SceneRunner.RunnerRegisteRequest.ip)
}
inline std::string* RunnerRegisteRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:SceneRunner.RunnerRegisteRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& RunnerRegisteRequest::_internal_ip() const {
  return ip_.Get();
}
inline void RunnerRegisteRequest::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RunnerRegisteRequest::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SceneRunner.RunnerRegisteRequest.ip)
}
inline void RunnerRegisteRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SceneRunner.RunnerRegisteRequest.ip)
}
inline void RunnerRegisteRequest::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SceneRunner.RunnerRegisteRequest.ip)
}
inline std::string* RunnerRegisteRequest::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RunnerRegisteRequest::release_ip() {
  // @@protoc_insertion_point(field_release:SceneRunner.RunnerRegisteRequest.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RunnerRegisteRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SceneRunner.RunnerRegisteRequest.ip)
}

// int32 port = 3;
inline void RunnerRegisteRequest::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunnerRegisteRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunnerRegisteRequest::port() const {
  // @@protoc_insertion_point(field_get:SceneRunner.RunnerRegisteRequest.port)
  return _internal_port();
}
inline void RunnerRegisteRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void RunnerRegisteRequest::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:SceneRunner.RunnerRegisteRequest.port)
}

// int32 status = 4;
inline void RunnerRegisteRequest::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunnerRegisteRequest::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunnerRegisteRequest::status() const {
  // @@protoc_insertion_point(field_get:SceneRunner.RunnerRegisteRequest.status)
  return _internal_status();
}
inline void RunnerRegisteRequest::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void RunnerRegisteRequest::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:SceneRunner.RunnerRegisteRequest.status)
}

// -------------------------------------------------------------------

// RunnerRegisteResponse

// uint32 res = 1;
inline void RunnerRegisteResponse::clear_res() {
  res_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RunnerRegisteResponse::_internal_res() const {
  return res_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RunnerRegisteResponse::res() const {
  // @@protoc_insertion_point(field_get:SceneRunner.RunnerRegisteResponse.res)
  return _internal_res();
}
inline void RunnerRegisteResponse::_internal_set_res(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  res_ = value;
}
inline void RunnerRegisteResponse::set_res(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:SceneRunner.RunnerRegisteResponse.res)
}

// -------------------------------------------------------------------

// RunnerUnregisterRequest

// int32 nodeid = 1;
inline void RunnerUnregisterRequest::clear_nodeid() {
  nodeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunnerUnregisterRequest::_internal_nodeid() const {
  return nodeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunnerUnregisterRequest::nodeid() const {
  // @@protoc_insertion_point(field_get:SceneRunner.RunnerUnregisterRequest.nodeid)
  return _internal_nodeid();
}
inline void RunnerUnregisterRequest::_internal_set_nodeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nodeid_ = value;
}
inline void RunnerUnregisterRequest::set_nodeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nodeid(value);
  // @@protoc_insertion_point(field_set:SceneRunner.RunnerUnregisterRequest.nodeid)
}

// -------------------------------------------------------------------

// RunnerUnregisterResponse

// int32 res = 1;
inline void RunnerUnregisterResponse::clear_res() {
  res_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunnerUnregisterResponse::_internal_res() const {
  return res_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunnerUnregisterResponse::res() const {
  // @@protoc_insertion_point(field_get:SceneRunner.RunnerUnregisterResponse.res)
  return _internal_res();
}
inline void RunnerUnregisterResponse::_internal_set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  res_ = value;
}
inline void RunnerUnregisterResponse::set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:SceneRunner.RunnerUnregisterResponse.res)
}

// -------------------------------------------------------------------

// RunnerHeartbeatRequest

// int32 nodeid = 1;
inline void RunnerHeartbeatRequest::clear_nodeid() {
  nodeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunnerHeartbeatRequest::_internal_nodeid() const {
  return nodeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunnerHeartbeatRequest::nodeid() const {
  // @@protoc_insertion_point(field_get:SceneRunner.RunnerHeartbeatRequest.nodeid)
  return _internal_nodeid();
}
inline void RunnerHeartbeatRequest::_internal_set_nodeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nodeid_ = value;
}
inline void RunnerHeartbeatRequest::set_nodeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nodeid(value);
  // @@protoc_insertion_point(field_set:SceneRunner.RunnerHeartbeatRequest.nodeid)
}

// int32 runningcount = 2;
inline void RunnerHeartbeatRequest::clear_runningcount() {
  runningcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunnerHeartbeatRequest::_internal_runningcount() const {
  return runningcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunnerHeartbeatRequest::runningcount() const {
  // @@protoc_insertion_point(field_get:SceneRunner.RunnerHeartbeatRequest.runningcount)
  return _internal_runningcount();
}
inline void RunnerHeartbeatRequest::_internal_set_runningcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  runningcount_ = value;
}
inline void RunnerHeartbeatRequest::set_runningcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_runningcount(value);
  // @@protoc_insertion_point(field_set:SceneRunner.RunnerHeartbeatRequest.runningcount)
}

// int32 status = 3;
inline void RunnerHeartbeatRequest::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunnerHeartbeatRequest::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunnerHeartbeatRequest::status() const {
  // @@protoc_insertion_point(field_get:SceneRunner.RunnerHeartbeatRequest.status)
  return _internal_status();
}
inline void RunnerHeartbeatRequest::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void RunnerHeartbeatRequest::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:SceneRunner.RunnerHeartbeatRequest.status)
}

// -------------------------------------------------------------------

// RunnerHeartbeatResponse

// int32 res = 1;
inline void RunnerHeartbeatResponse::clear_res() {
  res_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunnerHeartbeatResponse::_internal_res() const {
  return res_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunnerHeartbeatResponse::res() const {
  // @@protoc_insertion_point(field_get:SceneRunner.RunnerHeartbeatResponse.res)
  return _internal_res();
}
inline void RunnerHeartbeatResponse::_internal_set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  res_ = value;
}
inline void RunnerHeartbeatResponse::set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:SceneRunner.RunnerHeartbeatResponse.res)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SceneRunner

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_runnerregister_2eproto
